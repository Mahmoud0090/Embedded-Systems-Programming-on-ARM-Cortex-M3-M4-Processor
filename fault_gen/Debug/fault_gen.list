
fault_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000135c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800152c  0800152c  0000252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001690  08001690  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001690  08001690  00002690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001698  08001698  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001698  08001698  00002698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800169c  0800169c  0000269c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080016a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080016fc  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080016fc  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009fd  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003be  00000000  00000000  00003a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00003e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e3  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cbe  00000000  00000000  00004073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001519  00000000  00000000  00006d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000097e8  00000000  00000000  0000824a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011a32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bf4  00000000  00000000  00011a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0001266c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001514 	.word	0x08001514

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001514 	.word	0x08001514

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <func_divide>:

#include <stdio.h>
#include <stdint.h>

int func_divide(int x , int y)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	return x/y;
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <main>:



int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
    //1- enable all configurable exceptions, usage fault, mem manage fault and bus fault

	uint32_t* pSHCHR = (uint32_t *) 0xE000ED24;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <main+0x40>)
 80002d4:	607b      	str	r3, [r7, #4]
	//*pSHCHR |= (7 << 16);

	*pSHCHR |= (1 << 16); //mem manage fault
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	601a      	str	r2, [r3, #0]
	*pSHCHR |= (1 << 17); // bus fault
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	601a      	str	r2, [r3, #0]
	//*pSHCHR |= (1 << 18); //usage fault (if not enabled in our example)
							//hardfault will be called


	//2- enable divide by zero trap
	uint32_t *pCCP = (uint32_t*) 0xE000ED14; //configuration & control register
 80002ee:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <main+0x44>)
 80002f0:	603b      	str	r3, [r7, #0]
	*pCCP |= (1<<4); // enable 4th bit for divide by zero
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 0210 	orr.w	r2, r3, #16
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	601a      	str	r2, [r3, #0]

	//3- attemp to divide by zero
	func_divide(10,0);
 80002fe:	2100      	movs	r1, #0
 8000300:	200a      	movs	r0, #10
 8000302:	f7ff ffd5 	bl	80002b0 <func_divide>

	for(;;);
 8000306:	bf00      	nop
 8000308:	e7fd      	b.n	8000306 <main+0x3a>
 800030a:	bf00      	nop
 800030c:	e000ed24 	.word	0xe000ed24
 8000310:	e000ed14 	.word	0xe000ed14

08000314 <HardFault_Handler>:
}

//2-implement the fault handler

void HardFault_Handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	printf("exception : Hardfault\n");
 8000318:	4802      	ldr	r0, [pc, #8]	@ (8000324 <HardFault_Handler+0x10>)
 800031a:	f000 fa9d 	bl	8000858 <puts>
	while(1);
 800031e:	bf00      	nop
 8000320:	e7fd      	b.n	800031e <HardFault_Handler+0xa>
 8000322:	bf00      	nop
 8000324:	0800152c 	.word	0x0800152c

08000328 <MemManage_Handler>:

}
void MemManage_Handler(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	printf("exception : Mem manage fault\n");
 800032c:	4802      	ldr	r0, [pc, #8]	@ (8000338 <MemManage_Handler+0x10>)
 800032e:	f000 fa93 	bl	8000858 <puts>
	while(1);
 8000332:	bf00      	nop
 8000334:	e7fd      	b.n	8000332 <MemManage_Handler+0xa>
 8000336:	bf00      	nop
 8000338:	08001544 	.word	0x08001544

0800033c <BusFault_Handler>:

}

void BusFault_Handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	printf("exception : Busfault\n");
 8000340:	4802      	ldr	r0, [pc, #8]	@ (800034c <BusFault_Handler+0x10>)
 8000342:	f000 fa89 	bl	8000858 <puts>
	while(1);
 8000346:	bf00      	nop
 8000348:	e7fd      	b.n	8000346 <BusFault_Handler+0xa>
 800034a:	bf00      	nop
 800034c:	08001564 	.word	0x08001564

08000350 <UsageFault_Handler>:
__attribute__((naked)) void UsageFault_Handler(void)
{
	//here we extract the value of MSP which happens to be
	//the base address of the stack frame (thread mode) which got saved
	//during the exception entry from thread mode to handler mode
	__asm("MRS r0 , MSP");
 8000350:	f3ef 8008 	mrs	r0, MSP
	__asm("B UsageFault_Handler_c");
 8000354:	f000 b802 	b.w	800035c <UsageFault_Handler_c>
}
 8000358:	bf00      	nop
	...

0800035c <UsageFault_Handler_c>:

// the R0 value from the above UsageFault_Handler will be
//passed as arg to UsageFault_Handler_c (based on caller & callee rules)
void UsageFault_Handler_c(uint32_t* pBaseStackFrame)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

	uint32_t* pUFSR = (uint32_t*) 0xE000ED2A; //usage fault status register
 8000364:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <UsageFault_Handler_c+0x98>)
 8000366:	60fb      	str	r3, [r7, #12]
	printf("exception : Usagefault\n");
 8000368:	4823      	ldr	r0, [pc, #140]	@ (80003f8 <UsageFault_Handler_c+0x9c>)
 800036a:	f000 fa75 	bl	8000858 <puts>
	printf("pUFSR = %lx\n" , (*pUFSR));
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	4821      	ldr	r0, [pc, #132]	@ (80003fc <UsageFault_Handler_c+0xa0>)
 8000376:	f000 fa07 	bl	8000788 <iprintf>
	printf("BaseStackFrame = %p\n" , pBaseStackFrame);
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	4820      	ldr	r0, [pc, #128]	@ (8000400 <UsageFault_Handler_c+0xa4>)
 800037e:	f000 fa03 	bl	8000788 <iprintf>
	printf("value of R0 = %lx\n" , pBaseStackFrame[0]);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4619      	mov	r1, r3
 8000388:	481e      	ldr	r0, [pc, #120]	@ (8000404 <UsageFault_Handler_c+0xa8>)
 800038a:	f000 f9fd 	bl	8000788 <iprintf>
	printf("value of R1 = %lx\n" , pBaseStackFrame[1]);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3304      	adds	r3, #4
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4619      	mov	r1, r3
 8000396:	481c      	ldr	r0, [pc, #112]	@ (8000408 <UsageFault_Handler_c+0xac>)
 8000398:	f000 f9f6 	bl	8000788 <iprintf>
	printf("value of R2 = %lx\n" , pBaseStackFrame[2]);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3308      	adds	r3, #8
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4619      	mov	r1, r3
 80003a4:	4819      	ldr	r0, [pc, #100]	@ (800040c <UsageFault_Handler_c+0xb0>)
 80003a6:	f000 f9ef 	bl	8000788 <iprintf>
	printf("value of R3 = %lx\n" , pBaseStackFrame[3]);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	330c      	adds	r3, #12
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4619      	mov	r1, r3
 80003b2:	4817      	ldr	r0, [pc, #92]	@ (8000410 <UsageFault_Handler_c+0xb4>)
 80003b4:	f000 f9e8 	bl	8000788 <iprintf>
	printf("value of R12 = %lx\n" , pBaseStackFrame[4]);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3310      	adds	r3, #16
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4619      	mov	r1, r3
 80003c0:	4814      	ldr	r0, [pc, #80]	@ (8000414 <UsageFault_Handler_c+0xb8>)
 80003c2:	f000 f9e1 	bl	8000788 <iprintf>
	printf("value of LR = %lx\n" , pBaseStackFrame[5]);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3314      	adds	r3, #20
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	4812      	ldr	r0, [pc, #72]	@ (8000418 <UsageFault_Handler_c+0xbc>)
 80003d0:	f000 f9da 	bl	8000788 <iprintf>
	printf("value of PC = %lx\n" , pBaseStackFrame[6]);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3318      	adds	r3, #24
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4619      	mov	r1, r3
 80003dc:	480f      	ldr	r0, [pc, #60]	@ (800041c <UsageFault_Handler_c+0xc0>)
 80003de:	f000 f9d3 	bl	8000788 <iprintf>
	printf("value of XPSR = %lx\n" , pBaseStackFrame[7]);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	331c      	adds	r3, #28
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4619      	mov	r1, r3
 80003ea:	480d      	ldr	r0, [pc, #52]	@ (8000420 <UsageFault_Handler_c+0xc4>)
 80003ec:	f000 f9cc 	bl	8000788 <iprintf>
	while(1);
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <UsageFault_Handler_c+0x94>
 80003f4:	e000ed2a 	.word	0xe000ed2a
 80003f8:	0800157c 	.word	0x0800157c
 80003fc:	08001594 	.word	0x08001594
 8000400:	080015a4 	.word	0x080015a4
 8000404:	080015bc 	.word	0x080015bc
 8000408:	080015d0 	.word	0x080015d0
 800040c:	080015e4 	.word	0x080015e4
 8000410:	080015f8 	.word	0x080015f8
 8000414:	0800160c 	.word	0x0800160c
 8000418:	08001620 	.word	0x08001620
 800041c:	08001634 	.word	0x08001634
 8000420:	08001648 	.word	0x08001648

08000424 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <ITM_SendChar+0x44>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <ITM_SendChar+0x44>)
 8000434:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000438:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <ITM_SendChar+0x48>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a0b      	ldr	r2, [pc, #44]	@ (800046c <ITM_SendChar+0x48>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000446:	bf00      	nop
 8000448:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f8      	beq.n	8000448 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000456:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	6013      	str	r3, [r2, #0]
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	e000edfc 	.word	0xe000edfc
 800046c:	e0000e00 	.word	0xe0000e00

08000470 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	e00a      	b.n	8000498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000482:	f3af 8000 	nop.w
 8000486:	4601      	mov	r1, r0
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	60ba      	str	r2, [r7, #8]
 800048e:	b2ca      	uxtb	r2, r1
 8000490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	3301      	adds	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf0      	blt.n	8000482 <_read+0x12>
  }

  return len;
 80004a0:	687b      	ldr	r3, [r7, #4]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	60f8      	str	r0, [r7, #12]
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	e009      	b.n	80004d0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	60ba      	str	r2, [r7, #8]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ffad 	bl	8000424 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	3301      	adds	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	697a      	ldr	r2, [r7, #20]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dbf1      	blt.n	80004bc <_write+0x12>
  }
  return len;
 80004d8:	687b      	ldr	r3, [r7, #4]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <_close>:

int _close(int file)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000508:	605a      	str	r2, [r3, #4]
  return 0;
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <_isatty>:

int _isatty(int file)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800052a:	b480      	push	{r7}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
	...

08000544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800054c:	4a14      	ldr	r2, [pc, #80]	@ (80005a0 <_sbrk+0x5c>)
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <_sbrk+0x60>)
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <_sbrk+0x64>)
 8000562:	4a12      	ldr	r2, [pc, #72]	@ (80005ac <_sbrk+0x68>)
 8000564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	429a      	cmp	r2, r3
 8000572:	d207      	bcs.n	8000584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000574:	f000 fa9e 	bl	8000ab4 <__errno>
 8000578:	4603      	mov	r3, r0
 800057a:	220c      	movs	r2, #12
 800057c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	e009      	b.n	8000598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	4a05      	ldr	r2, [pc, #20]	@ (80005a8 <_sbrk+0x64>)
 8000594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20020000 	.word	0x20020000
 80005a4:	00000400 	.word	0x00000400
 80005a8:	20000078 	.word	0x20000078
 80005ac:	200001c8 	.word	0x200001c8

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	@ (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	@ (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 fa6f 	bl	8000ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe73 	bl	80002cc <main>

080005e6 <LoopForever>:

LoopForever:
  b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005f4:	080016a0 	.word	0x080016a0
  ldr r2, =_sbss
 80005f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005fc:	200001c8 	.word	0x200001c8

08000600 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <std>:
 8000604:	2300      	movs	r3, #0
 8000606:	b510      	push	{r4, lr}
 8000608:	4604      	mov	r4, r0
 800060a:	e9c0 3300 	strd	r3, r3, [r0]
 800060e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000612:	6083      	str	r3, [r0, #8]
 8000614:	8181      	strh	r1, [r0, #12]
 8000616:	6643      	str	r3, [r0, #100]	@ 0x64
 8000618:	81c2      	strh	r2, [r0, #14]
 800061a:	6183      	str	r3, [r0, #24]
 800061c:	4619      	mov	r1, r3
 800061e:	2208      	movs	r2, #8
 8000620:	305c      	adds	r0, #92	@ 0x5c
 8000622:	f000 f9f9 	bl	8000a18 <memset>
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <std+0x58>)
 8000628:	6263      	str	r3, [r4, #36]	@ 0x24
 800062a:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <std+0x5c>)
 800062c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <std+0x60>)
 8000630:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <std+0x64>)
 8000634:	6323      	str	r3, [r4, #48]	@ 0x30
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <std+0x68>)
 8000638:	6224      	str	r4, [r4, #32]
 800063a:	429c      	cmp	r4, r3
 800063c:	d006      	beq.n	800064c <std+0x48>
 800063e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000642:	4294      	cmp	r4, r2
 8000644:	d002      	beq.n	800064c <std+0x48>
 8000646:	33d0      	adds	r3, #208	@ 0xd0
 8000648:	429c      	cmp	r4, r3
 800064a:	d105      	bne.n	8000658 <std+0x54>
 800064c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000654:	f000 ba58 	b.w	8000b08 <__retarget_lock_init_recursive>
 8000658:	bd10      	pop	{r4, pc}
 800065a:	bf00      	nop
 800065c:	08000869 	.word	0x08000869
 8000660:	0800088b 	.word	0x0800088b
 8000664:	080008c3 	.word	0x080008c3
 8000668:	080008e7 	.word	0x080008e7
 800066c:	2000007c 	.word	0x2000007c

08000670 <stdio_exit_handler>:
 8000670:	4a02      	ldr	r2, [pc, #8]	@ (800067c <stdio_exit_handler+0xc>)
 8000672:	4903      	ldr	r1, [pc, #12]	@ (8000680 <stdio_exit_handler+0x10>)
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <stdio_exit_handler+0x14>)
 8000676:	f000 b869 	b.w	800074c <_fwalk_sglue>
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000
 8000680:	0800139d 	.word	0x0800139d
 8000684:	20000010 	.word	0x20000010

08000688 <cleanup_stdio>:
 8000688:	6841      	ldr	r1, [r0, #4]
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <cleanup_stdio+0x34>)
 800068c:	4299      	cmp	r1, r3
 800068e:	b510      	push	{r4, lr}
 8000690:	4604      	mov	r4, r0
 8000692:	d001      	beq.n	8000698 <cleanup_stdio+0x10>
 8000694:	f000 fe82 	bl	800139c <_fflush_r>
 8000698:	68a1      	ldr	r1, [r4, #8]
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <cleanup_stdio+0x38>)
 800069c:	4299      	cmp	r1, r3
 800069e:	d002      	beq.n	80006a6 <cleanup_stdio+0x1e>
 80006a0:	4620      	mov	r0, r4
 80006a2:	f000 fe7b 	bl	800139c <_fflush_r>
 80006a6:	68e1      	ldr	r1, [r4, #12]
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <cleanup_stdio+0x3c>)
 80006aa:	4299      	cmp	r1, r3
 80006ac:	d004      	beq.n	80006b8 <cleanup_stdio+0x30>
 80006ae:	4620      	mov	r0, r4
 80006b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b4:	f000 be72 	b.w	800139c <_fflush_r>
 80006b8:	bd10      	pop	{r4, pc}
 80006ba:	bf00      	nop
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	200000e4 	.word	0x200000e4
 80006c4:	2000014c 	.word	0x2000014c

080006c8 <global_stdio_init.part.0>:
 80006c8:	b510      	push	{r4, lr}
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <global_stdio_init.part.0+0x30>)
 80006cc:	4c0b      	ldr	r4, [pc, #44]	@ (80006fc <global_stdio_init.part.0+0x34>)
 80006ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000700 <global_stdio_init.part.0+0x38>)
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	4620      	mov	r0, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	2104      	movs	r1, #4
 80006d8:	f7ff ff94 	bl	8000604 <std>
 80006dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006e0:	2201      	movs	r2, #1
 80006e2:	2109      	movs	r1, #9
 80006e4:	f7ff ff8e 	bl	8000604 <std>
 80006e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006ec:	2202      	movs	r2, #2
 80006ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f2:	2112      	movs	r1, #18
 80006f4:	f7ff bf86 	b.w	8000604 <std>
 80006f8:	200001b4 	.word	0x200001b4
 80006fc:	2000007c 	.word	0x2000007c
 8000700:	08000671 	.word	0x08000671

08000704 <__sfp_lock_acquire>:
 8000704:	4801      	ldr	r0, [pc, #4]	@ (800070c <__sfp_lock_acquire+0x8>)
 8000706:	f000 ba00 	b.w	8000b0a <__retarget_lock_acquire_recursive>
 800070a:	bf00      	nop
 800070c:	200001bd 	.word	0x200001bd

08000710 <__sfp_lock_release>:
 8000710:	4801      	ldr	r0, [pc, #4]	@ (8000718 <__sfp_lock_release+0x8>)
 8000712:	f000 b9fb 	b.w	8000b0c <__retarget_lock_release_recursive>
 8000716:	bf00      	nop
 8000718:	200001bd 	.word	0x200001bd

0800071c <__sinit>:
 800071c:	b510      	push	{r4, lr}
 800071e:	4604      	mov	r4, r0
 8000720:	f7ff fff0 	bl	8000704 <__sfp_lock_acquire>
 8000724:	6a23      	ldr	r3, [r4, #32]
 8000726:	b11b      	cbz	r3, 8000730 <__sinit+0x14>
 8000728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800072c:	f7ff bff0 	b.w	8000710 <__sfp_lock_release>
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <__sinit+0x28>)
 8000732:	6223      	str	r3, [r4, #32]
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <__sinit+0x2c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1f5      	bne.n	8000728 <__sinit+0xc>
 800073c:	f7ff ffc4 	bl	80006c8 <global_stdio_init.part.0>
 8000740:	e7f2      	b.n	8000728 <__sinit+0xc>
 8000742:	bf00      	nop
 8000744:	08000689 	.word	0x08000689
 8000748:	200001b4 	.word	0x200001b4

0800074c <_fwalk_sglue>:
 800074c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000750:	4607      	mov	r7, r0
 8000752:	4688      	mov	r8, r1
 8000754:	4614      	mov	r4, r2
 8000756:	2600      	movs	r6, #0
 8000758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800075c:	f1b9 0901 	subs.w	r9, r9, #1
 8000760:	d505      	bpl.n	800076e <_fwalk_sglue+0x22>
 8000762:	6824      	ldr	r4, [r4, #0]
 8000764:	2c00      	cmp	r4, #0
 8000766:	d1f7      	bne.n	8000758 <_fwalk_sglue+0xc>
 8000768:	4630      	mov	r0, r6
 800076a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800076e:	89ab      	ldrh	r3, [r5, #12]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d907      	bls.n	8000784 <_fwalk_sglue+0x38>
 8000774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000778:	3301      	adds	r3, #1
 800077a:	d003      	beq.n	8000784 <_fwalk_sglue+0x38>
 800077c:	4629      	mov	r1, r5
 800077e:	4638      	mov	r0, r7
 8000780:	47c0      	blx	r8
 8000782:	4306      	orrs	r6, r0
 8000784:	3568      	adds	r5, #104	@ 0x68
 8000786:	e7e9      	b.n	800075c <_fwalk_sglue+0x10>

08000788 <iprintf>:
 8000788:	b40f      	push	{r0, r1, r2, r3}
 800078a:	b507      	push	{r0, r1, r2, lr}
 800078c:	4906      	ldr	r1, [pc, #24]	@ (80007a8 <iprintf+0x20>)
 800078e:	ab04      	add	r3, sp, #16
 8000790:	6808      	ldr	r0, [r1, #0]
 8000792:	f853 2b04 	ldr.w	r2, [r3], #4
 8000796:	6881      	ldr	r1, [r0, #8]
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	f000 fad9 	bl	8000d50 <_vfiprintf_r>
 800079e:	b003      	add	sp, #12
 80007a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007a4:	b004      	add	sp, #16
 80007a6:	4770      	bx	lr
 80007a8:	2000000c 	.word	0x2000000c

080007ac <_puts_r>:
 80007ac:	6a03      	ldr	r3, [r0, #32]
 80007ae:	b570      	push	{r4, r5, r6, lr}
 80007b0:	6884      	ldr	r4, [r0, #8]
 80007b2:	4605      	mov	r5, r0
 80007b4:	460e      	mov	r6, r1
 80007b6:	b90b      	cbnz	r3, 80007bc <_puts_r+0x10>
 80007b8:	f7ff ffb0 	bl	800071c <__sinit>
 80007bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007be:	07db      	lsls	r3, r3, #31
 80007c0:	d405      	bmi.n	80007ce <_puts_r+0x22>
 80007c2:	89a3      	ldrh	r3, [r4, #12]
 80007c4:	0598      	lsls	r0, r3, #22
 80007c6:	d402      	bmi.n	80007ce <_puts_r+0x22>
 80007c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007ca:	f000 f99e 	bl	8000b0a <__retarget_lock_acquire_recursive>
 80007ce:	89a3      	ldrh	r3, [r4, #12]
 80007d0:	0719      	lsls	r1, r3, #28
 80007d2:	d502      	bpl.n	80007da <_puts_r+0x2e>
 80007d4:	6923      	ldr	r3, [r4, #16]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d135      	bne.n	8000846 <_puts_r+0x9a>
 80007da:	4621      	mov	r1, r4
 80007dc:	4628      	mov	r0, r5
 80007de:	f000 f8c5 	bl	800096c <__swsetup_r>
 80007e2:	b380      	cbz	r0, 8000846 <_puts_r+0x9a>
 80007e4:	f04f 35ff 	mov.w	r5, #4294967295
 80007e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007ea:	07da      	lsls	r2, r3, #31
 80007ec:	d405      	bmi.n	80007fa <_puts_r+0x4e>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	059b      	lsls	r3, r3, #22
 80007f2:	d402      	bmi.n	80007fa <_puts_r+0x4e>
 80007f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007f6:	f000 f989 	bl	8000b0c <__retarget_lock_release_recursive>
 80007fa:	4628      	mov	r0, r5
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da04      	bge.n	800080c <_puts_r+0x60>
 8000802:	69a2      	ldr	r2, [r4, #24]
 8000804:	429a      	cmp	r2, r3
 8000806:	dc17      	bgt.n	8000838 <_puts_r+0x8c>
 8000808:	290a      	cmp	r1, #10
 800080a:	d015      	beq.n	8000838 <_puts_r+0x8c>
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	6022      	str	r2, [r4, #0]
 8000812:	7019      	strb	r1, [r3, #0]
 8000814:	68a3      	ldr	r3, [r4, #8]
 8000816:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800081a:	3b01      	subs	r3, #1
 800081c:	60a3      	str	r3, [r4, #8]
 800081e:	2900      	cmp	r1, #0
 8000820:	d1ed      	bne.n	80007fe <_puts_r+0x52>
 8000822:	2b00      	cmp	r3, #0
 8000824:	da11      	bge.n	800084a <_puts_r+0x9e>
 8000826:	4622      	mov	r2, r4
 8000828:	210a      	movs	r1, #10
 800082a:	4628      	mov	r0, r5
 800082c:	f000 f85f 	bl	80008ee <__swbuf_r>
 8000830:	3001      	adds	r0, #1
 8000832:	d0d7      	beq.n	80007e4 <_puts_r+0x38>
 8000834:	250a      	movs	r5, #10
 8000836:	e7d7      	b.n	80007e8 <_puts_r+0x3c>
 8000838:	4622      	mov	r2, r4
 800083a:	4628      	mov	r0, r5
 800083c:	f000 f857 	bl	80008ee <__swbuf_r>
 8000840:	3001      	adds	r0, #1
 8000842:	d1e7      	bne.n	8000814 <_puts_r+0x68>
 8000844:	e7ce      	b.n	80007e4 <_puts_r+0x38>
 8000846:	3e01      	subs	r6, #1
 8000848:	e7e4      	b.n	8000814 <_puts_r+0x68>
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	6022      	str	r2, [r4, #0]
 8000850:	220a      	movs	r2, #10
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e7ee      	b.n	8000834 <_puts_r+0x88>
	...

08000858 <puts>:
 8000858:	4b02      	ldr	r3, [pc, #8]	@ (8000864 <puts+0xc>)
 800085a:	4601      	mov	r1, r0
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	f7ff bfa5 	b.w	80007ac <_puts_r>
 8000862:	bf00      	nop
 8000864:	2000000c 	.word	0x2000000c

08000868 <__sread>:
 8000868:	b510      	push	{r4, lr}
 800086a:	460c      	mov	r4, r1
 800086c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000870:	f000 f8fc 	bl	8000a6c <_read_r>
 8000874:	2800      	cmp	r0, #0
 8000876:	bfab      	itete	ge
 8000878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800087a:	89a3      	ldrhlt	r3, [r4, #12]
 800087c:	181b      	addge	r3, r3, r0
 800087e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000882:	bfac      	ite	ge
 8000884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000886:	81a3      	strhlt	r3, [r4, #12]
 8000888:	bd10      	pop	{r4, pc}

0800088a <__swrite>:
 800088a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800088e:	461f      	mov	r7, r3
 8000890:	898b      	ldrh	r3, [r1, #12]
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	4605      	mov	r5, r0
 8000896:	460c      	mov	r4, r1
 8000898:	4616      	mov	r6, r2
 800089a:	d505      	bpl.n	80008a8 <__swrite+0x1e>
 800089c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a0:	2302      	movs	r3, #2
 80008a2:	2200      	movs	r2, #0
 80008a4:	f000 f8d0 	bl	8000a48 <_lseek_r>
 80008a8:	89a3      	ldrh	r3, [r4, #12]
 80008aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008b2:	81a3      	strh	r3, [r4, #12]
 80008b4:	4632      	mov	r2, r6
 80008b6:	463b      	mov	r3, r7
 80008b8:	4628      	mov	r0, r5
 80008ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008be:	f000 b8e7 	b.w	8000a90 <_write_r>

080008c2 <__sseek>:
 80008c2:	b510      	push	{r4, lr}
 80008c4:	460c      	mov	r4, r1
 80008c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ca:	f000 f8bd 	bl	8000a48 <_lseek_r>
 80008ce:	1c43      	adds	r3, r0, #1
 80008d0:	89a3      	ldrh	r3, [r4, #12]
 80008d2:	bf15      	itete	ne
 80008d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008de:	81a3      	strheq	r3, [r4, #12]
 80008e0:	bf18      	it	ne
 80008e2:	81a3      	strhne	r3, [r4, #12]
 80008e4:	bd10      	pop	{r4, pc}

080008e6 <__sclose>:
 80008e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ea:	f000 b89d 	b.w	8000a28 <_close_r>

080008ee <__swbuf_r>:
 80008ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f0:	460e      	mov	r6, r1
 80008f2:	4614      	mov	r4, r2
 80008f4:	4605      	mov	r5, r0
 80008f6:	b118      	cbz	r0, 8000900 <__swbuf_r+0x12>
 80008f8:	6a03      	ldr	r3, [r0, #32]
 80008fa:	b90b      	cbnz	r3, 8000900 <__swbuf_r+0x12>
 80008fc:	f7ff ff0e 	bl	800071c <__sinit>
 8000900:	69a3      	ldr	r3, [r4, #24]
 8000902:	60a3      	str	r3, [r4, #8]
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	071a      	lsls	r2, r3, #28
 8000908:	d501      	bpl.n	800090e <__swbuf_r+0x20>
 800090a:	6923      	ldr	r3, [r4, #16]
 800090c:	b943      	cbnz	r3, 8000920 <__swbuf_r+0x32>
 800090e:	4621      	mov	r1, r4
 8000910:	4628      	mov	r0, r5
 8000912:	f000 f82b 	bl	800096c <__swsetup_r>
 8000916:	b118      	cbz	r0, 8000920 <__swbuf_r+0x32>
 8000918:	f04f 37ff 	mov.w	r7, #4294967295
 800091c:	4638      	mov	r0, r7
 800091e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	6922      	ldr	r2, [r4, #16]
 8000924:	1a98      	subs	r0, r3, r2
 8000926:	6963      	ldr	r3, [r4, #20]
 8000928:	b2f6      	uxtb	r6, r6
 800092a:	4283      	cmp	r3, r0
 800092c:	4637      	mov	r7, r6
 800092e:	dc05      	bgt.n	800093c <__swbuf_r+0x4e>
 8000930:	4621      	mov	r1, r4
 8000932:	4628      	mov	r0, r5
 8000934:	f000 fd32 	bl	800139c <_fflush_r>
 8000938:	2800      	cmp	r0, #0
 800093a:	d1ed      	bne.n	8000918 <__swbuf_r+0x2a>
 800093c:	68a3      	ldr	r3, [r4, #8]
 800093e:	3b01      	subs	r3, #1
 8000940:	60a3      	str	r3, [r4, #8]
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	6022      	str	r2, [r4, #0]
 8000948:	701e      	strb	r6, [r3, #0]
 800094a:	6962      	ldr	r2, [r4, #20]
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	429a      	cmp	r2, r3
 8000950:	d004      	beq.n	800095c <__swbuf_r+0x6e>
 8000952:	89a3      	ldrh	r3, [r4, #12]
 8000954:	07db      	lsls	r3, r3, #31
 8000956:	d5e1      	bpl.n	800091c <__swbuf_r+0x2e>
 8000958:	2e0a      	cmp	r6, #10
 800095a:	d1df      	bne.n	800091c <__swbuf_r+0x2e>
 800095c:	4621      	mov	r1, r4
 800095e:	4628      	mov	r0, r5
 8000960:	f000 fd1c 	bl	800139c <_fflush_r>
 8000964:	2800      	cmp	r0, #0
 8000966:	d0d9      	beq.n	800091c <__swbuf_r+0x2e>
 8000968:	e7d6      	b.n	8000918 <__swbuf_r+0x2a>
	...

0800096c <__swsetup_r>:
 800096c:	b538      	push	{r3, r4, r5, lr}
 800096e:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <__swsetup_r+0xa8>)
 8000970:	4605      	mov	r5, r0
 8000972:	6818      	ldr	r0, [r3, #0]
 8000974:	460c      	mov	r4, r1
 8000976:	b118      	cbz	r0, 8000980 <__swsetup_r+0x14>
 8000978:	6a03      	ldr	r3, [r0, #32]
 800097a:	b90b      	cbnz	r3, 8000980 <__swsetup_r+0x14>
 800097c:	f7ff fece 	bl	800071c <__sinit>
 8000980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000984:	0719      	lsls	r1, r3, #28
 8000986:	d422      	bmi.n	80009ce <__swsetup_r+0x62>
 8000988:	06da      	lsls	r2, r3, #27
 800098a:	d407      	bmi.n	800099c <__swsetup_r+0x30>
 800098c:	2209      	movs	r2, #9
 800098e:	602a      	str	r2, [r5, #0]
 8000990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000994:	81a3      	strh	r3, [r4, #12]
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	e033      	b.n	8000a04 <__swsetup_r+0x98>
 800099c:	0758      	lsls	r0, r3, #29
 800099e:	d512      	bpl.n	80009c6 <__swsetup_r+0x5a>
 80009a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009a2:	b141      	cbz	r1, 80009b6 <__swsetup_r+0x4a>
 80009a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009a8:	4299      	cmp	r1, r3
 80009aa:	d002      	beq.n	80009b2 <__swsetup_r+0x46>
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 f8af 	bl	8000b10 <_free_r>
 80009b2:	2300      	movs	r3, #0
 80009b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80009b6:	89a3      	ldrh	r3, [r4, #12]
 80009b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80009bc:	81a3      	strh	r3, [r4, #12]
 80009be:	2300      	movs	r3, #0
 80009c0:	6063      	str	r3, [r4, #4]
 80009c2:	6923      	ldr	r3, [r4, #16]
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	81a3      	strh	r3, [r4, #12]
 80009ce:	6923      	ldr	r3, [r4, #16]
 80009d0:	b94b      	cbnz	r3, 80009e6 <__swsetup_r+0x7a>
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009dc:	d003      	beq.n	80009e6 <__swsetup_r+0x7a>
 80009de:	4621      	mov	r1, r4
 80009e0:	4628      	mov	r0, r5
 80009e2:	f000 fd29 	bl	8001438 <__smakebuf_r>
 80009e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009ea:	f013 0201 	ands.w	r2, r3, #1
 80009ee:	d00a      	beq.n	8000a06 <__swsetup_r+0x9a>
 80009f0:	2200      	movs	r2, #0
 80009f2:	60a2      	str	r2, [r4, #8]
 80009f4:	6962      	ldr	r2, [r4, #20]
 80009f6:	4252      	negs	r2, r2
 80009f8:	61a2      	str	r2, [r4, #24]
 80009fa:	6922      	ldr	r2, [r4, #16]
 80009fc:	b942      	cbnz	r2, 8000a10 <__swsetup_r+0xa4>
 80009fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a02:	d1c5      	bne.n	8000990 <__swsetup_r+0x24>
 8000a04:	bd38      	pop	{r3, r4, r5, pc}
 8000a06:	0799      	lsls	r1, r3, #30
 8000a08:	bf58      	it	pl
 8000a0a:	6962      	ldrpl	r2, [r4, #20]
 8000a0c:	60a2      	str	r2, [r4, #8]
 8000a0e:	e7f4      	b.n	80009fa <__swsetup_r+0x8e>
 8000a10:	2000      	movs	r0, #0
 8000a12:	e7f7      	b.n	8000a04 <__swsetup_r+0x98>
 8000a14:	2000000c 	.word	0x2000000c

08000a18 <memset>:
 8000a18:	4402      	add	r2, r0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d100      	bne.n	8000a22 <memset+0xa>
 8000a20:	4770      	bx	lr
 8000a22:	f803 1b01 	strb.w	r1, [r3], #1
 8000a26:	e7f9      	b.n	8000a1c <memset+0x4>

08000a28 <_close_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4d06      	ldr	r5, [pc, #24]	@ (8000a44 <_close_r+0x1c>)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	4604      	mov	r4, r0
 8000a30:	4608      	mov	r0, r1
 8000a32:	602b      	str	r3, [r5, #0]
 8000a34:	f7ff fd55 	bl	80004e2 <_close>
 8000a38:	1c43      	adds	r3, r0, #1
 8000a3a:	d102      	bne.n	8000a42 <_close_r+0x1a>
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	b103      	cbz	r3, 8000a42 <_close_r+0x1a>
 8000a40:	6023      	str	r3, [r4, #0]
 8000a42:	bd38      	pop	{r3, r4, r5, pc}
 8000a44:	200001b8 	.word	0x200001b8

08000a48 <_lseek_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4d07      	ldr	r5, [pc, #28]	@ (8000a68 <_lseek_r+0x20>)
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4611      	mov	r1, r2
 8000a52:	2200      	movs	r2, #0
 8000a54:	602a      	str	r2, [r5, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	f7ff fd67 	bl	800052a <_lseek>
 8000a5c:	1c43      	adds	r3, r0, #1
 8000a5e:	d102      	bne.n	8000a66 <_lseek_r+0x1e>
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	b103      	cbz	r3, 8000a66 <_lseek_r+0x1e>
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	200001b8 	.word	0x200001b8

08000a6c <_read_r>:
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	4d07      	ldr	r5, [pc, #28]	@ (8000a8c <_read_r+0x20>)
 8000a70:	4604      	mov	r4, r0
 8000a72:	4608      	mov	r0, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	2200      	movs	r2, #0
 8000a78:	602a      	str	r2, [r5, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f7ff fcf8 	bl	8000470 <_read>
 8000a80:	1c43      	adds	r3, r0, #1
 8000a82:	d102      	bne.n	8000a8a <_read_r+0x1e>
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	b103      	cbz	r3, 8000a8a <_read_r+0x1e>
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}
 8000a8c:	200001b8 	.word	0x200001b8

08000a90 <_write_r>:
 8000a90:	b538      	push	{r3, r4, r5, lr}
 8000a92:	4d07      	ldr	r5, [pc, #28]	@ (8000ab0 <_write_r+0x20>)
 8000a94:	4604      	mov	r4, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4611      	mov	r1, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	602a      	str	r2, [r5, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f7ff fd03 	bl	80004aa <_write>
 8000aa4:	1c43      	adds	r3, r0, #1
 8000aa6:	d102      	bne.n	8000aae <_write_r+0x1e>
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	b103      	cbz	r3, 8000aae <_write_r+0x1e>
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	bd38      	pop	{r3, r4, r5, pc}
 8000ab0:	200001b8 	.word	0x200001b8

08000ab4 <__errno>:
 8000ab4:	4b01      	ldr	r3, [pc, #4]	@ (8000abc <__errno+0x8>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2000000c 	.word	0x2000000c

08000ac0 <__libc_init_array>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8000af8 <__libc_init_array+0x38>)
 8000ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8000afc <__libc_init_array+0x3c>)
 8000ac6:	1b64      	subs	r4, r4, r5
 8000ac8:	10a4      	asrs	r4, r4, #2
 8000aca:	2600      	movs	r6, #0
 8000acc:	42a6      	cmp	r6, r4
 8000ace:	d109      	bne.n	8000ae4 <__libc_init_array+0x24>
 8000ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8000b00 <__libc_init_array+0x40>)
 8000ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8000b04 <__libc_init_array+0x44>)
 8000ad4:	f000 fd1e 	bl	8001514 <_init>
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	10a4      	asrs	r4, r4, #2
 8000adc:	2600      	movs	r6, #0
 8000ade:	42a6      	cmp	r6, r4
 8000ae0:	d105      	bne.n	8000aee <__libc_init_array+0x2e>
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae8:	4798      	blx	r3
 8000aea:	3601      	adds	r6, #1
 8000aec:	e7ee      	b.n	8000acc <__libc_init_array+0xc>
 8000aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af2:	4798      	blx	r3
 8000af4:	3601      	adds	r6, #1
 8000af6:	e7f2      	b.n	8000ade <__libc_init_array+0x1e>
 8000af8:	08001698 	.word	0x08001698
 8000afc:	08001698 	.word	0x08001698
 8000b00:	08001698 	.word	0x08001698
 8000b04:	0800169c 	.word	0x0800169c

08000b08 <__retarget_lock_init_recursive>:
 8000b08:	4770      	bx	lr

08000b0a <__retarget_lock_acquire_recursive>:
 8000b0a:	4770      	bx	lr

08000b0c <__retarget_lock_release_recursive>:
 8000b0c:	4770      	bx	lr
	...

08000b10 <_free_r>:
 8000b10:	b538      	push	{r3, r4, r5, lr}
 8000b12:	4605      	mov	r5, r0
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d041      	beq.n	8000b9c <_free_r+0x8c>
 8000b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b1c:	1f0c      	subs	r4, r1, #4
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bfb8      	it	lt
 8000b22:	18e4      	addlt	r4, r4, r3
 8000b24:	f000 f8e0 	bl	8000ce8 <__malloc_lock>
 8000b28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <_free_r+0x90>)
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	b933      	cbnz	r3, 8000b3c <_free_r+0x2c>
 8000b2e:	6063      	str	r3, [r4, #4]
 8000b30:	6014      	str	r4, [r2, #0]
 8000b32:	4628      	mov	r0, r5
 8000b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b38:	f000 b8dc 	b.w	8000cf4 <__malloc_unlock>
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <_free_r+0x42>
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	1821      	adds	r1, r4, r0
 8000b44:	428b      	cmp	r3, r1
 8000b46:	bf01      	itttt	eq
 8000b48:	6819      	ldreq	r1, [r3, #0]
 8000b4a:	685b      	ldreq	r3, [r3, #4]
 8000b4c:	1809      	addeq	r1, r1, r0
 8000b4e:	6021      	streq	r1, [r4, #0]
 8000b50:	e7ed      	b.n	8000b2e <_free_r+0x1e>
 8000b52:	461a      	mov	r2, r3
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	b10b      	cbz	r3, 8000b5c <_free_r+0x4c>
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	d9fa      	bls.n	8000b52 <_free_r+0x42>
 8000b5c:	6811      	ldr	r1, [r2, #0]
 8000b5e:	1850      	adds	r0, r2, r1
 8000b60:	42a0      	cmp	r0, r4
 8000b62:	d10b      	bne.n	8000b7c <_free_r+0x6c>
 8000b64:	6820      	ldr	r0, [r4, #0]
 8000b66:	4401      	add	r1, r0
 8000b68:	1850      	adds	r0, r2, r1
 8000b6a:	4283      	cmp	r3, r0
 8000b6c:	6011      	str	r1, [r2, #0]
 8000b6e:	d1e0      	bne.n	8000b32 <_free_r+0x22>
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	6053      	str	r3, [r2, #4]
 8000b76:	4408      	add	r0, r1
 8000b78:	6010      	str	r0, [r2, #0]
 8000b7a:	e7da      	b.n	8000b32 <_free_r+0x22>
 8000b7c:	d902      	bls.n	8000b84 <_free_r+0x74>
 8000b7e:	230c      	movs	r3, #12
 8000b80:	602b      	str	r3, [r5, #0]
 8000b82:	e7d6      	b.n	8000b32 <_free_r+0x22>
 8000b84:	6820      	ldr	r0, [r4, #0]
 8000b86:	1821      	adds	r1, r4, r0
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	bf04      	itt	eq
 8000b8c:	6819      	ldreq	r1, [r3, #0]
 8000b8e:	685b      	ldreq	r3, [r3, #4]
 8000b90:	6063      	str	r3, [r4, #4]
 8000b92:	bf04      	itt	eq
 8000b94:	1809      	addeq	r1, r1, r0
 8000b96:	6021      	streq	r1, [r4, #0]
 8000b98:	6054      	str	r4, [r2, #4]
 8000b9a:	e7ca      	b.n	8000b32 <_free_r+0x22>
 8000b9c:	bd38      	pop	{r3, r4, r5, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001c4 	.word	0x200001c4

08000ba4 <sbrk_aligned>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8000be4 <sbrk_aligned+0x40>)
 8000ba8:	460c      	mov	r4, r1
 8000baa:	6831      	ldr	r1, [r6, #0]
 8000bac:	4605      	mov	r5, r0
 8000bae:	b911      	cbnz	r1, 8000bb6 <sbrk_aligned+0x12>
 8000bb0:	f000 fca0 	bl	80014f4 <_sbrk_r>
 8000bb4:	6030      	str	r0, [r6, #0]
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f000 fc9b 	bl	80014f4 <_sbrk_r>
 8000bbe:	1c43      	adds	r3, r0, #1
 8000bc0:	d103      	bne.n	8000bca <sbrk_aligned+0x26>
 8000bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	bd70      	pop	{r4, r5, r6, pc}
 8000bca:	1cc4      	adds	r4, r0, #3
 8000bcc:	f024 0403 	bic.w	r4, r4, #3
 8000bd0:	42a0      	cmp	r0, r4
 8000bd2:	d0f8      	beq.n	8000bc6 <sbrk_aligned+0x22>
 8000bd4:	1a21      	subs	r1, r4, r0
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f000 fc8c 	bl	80014f4 <_sbrk_r>
 8000bdc:	3001      	adds	r0, #1
 8000bde:	d1f2      	bne.n	8000bc6 <sbrk_aligned+0x22>
 8000be0:	e7ef      	b.n	8000bc2 <sbrk_aligned+0x1e>
 8000be2:	bf00      	nop
 8000be4:	200001c0 	.word	0x200001c0

08000be8 <_malloc_r>:
 8000be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bec:	1ccd      	adds	r5, r1, #3
 8000bee:	f025 0503 	bic.w	r5, r5, #3
 8000bf2:	3508      	adds	r5, #8
 8000bf4:	2d0c      	cmp	r5, #12
 8000bf6:	bf38      	it	cc
 8000bf8:	250c      	movcc	r5, #12
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	4606      	mov	r6, r0
 8000bfe:	db01      	blt.n	8000c04 <_malloc_r+0x1c>
 8000c00:	42a9      	cmp	r1, r5
 8000c02:	d904      	bls.n	8000c0e <_malloc_r+0x26>
 8000c04:	230c      	movs	r3, #12
 8000c06:	6033      	str	r3, [r6, #0]
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ce4 <_malloc_r+0xfc>
 8000c12:	f000 f869 	bl	8000ce8 <__malloc_lock>
 8000c16:	f8d8 3000 	ldr.w	r3, [r8]
 8000c1a:	461c      	mov	r4, r3
 8000c1c:	bb44      	cbnz	r4, 8000c70 <_malloc_r+0x88>
 8000c1e:	4629      	mov	r1, r5
 8000c20:	4630      	mov	r0, r6
 8000c22:	f7ff ffbf 	bl	8000ba4 <sbrk_aligned>
 8000c26:	1c43      	adds	r3, r0, #1
 8000c28:	4604      	mov	r4, r0
 8000c2a:	d158      	bne.n	8000cde <_malloc_r+0xf6>
 8000c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8000c30:	4627      	mov	r7, r4
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d143      	bne.n	8000cbe <_malloc_r+0xd6>
 8000c36:	2c00      	cmp	r4, #0
 8000c38:	d04b      	beq.n	8000cd2 <_malloc_r+0xea>
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	4630      	mov	r0, r6
 8000c40:	eb04 0903 	add.w	r9, r4, r3
 8000c44:	f000 fc56 	bl	80014f4 <_sbrk_r>
 8000c48:	4581      	cmp	r9, r0
 8000c4a:	d142      	bne.n	8000cd2 <_malloc_r+0xea>
 8000c4c:	6821      	ldr	r1, [r4, #0]
 8000c4e:	1a6d      	subs	r5, r5, r1
 8000c50:	4629      	mov	r1, r5
 8000c52:	4630      	mov	r0, r6
 8000c54:	f7ff ffa6 	bl	8000ba4 <sbrk_aligned>
 8000c58:	3001      	adds	r0, #1
 8000c5a:	d03a      	beq.n	8000cd2 <_malloc_r+0xea>
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	442b      	add	r3, r5
 8000c60:	6023      	str	r3, [r4, #0]
 8000c62:	f8d8 3000 	ldr.w	r3, [r8]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	bb62      	cbnz	r2, 8000cc4 <_malloc_r+0xdc>
 8000c6a:	f8c8 7000 	str.w	r7, [r8]
 8000c6e:	e00f      	b.n	8000c90 <_malloc_r+0xa8>
 8000c70:	6822      	ldr	r2, [r4, #0]
 8000c72:	1b52      	subs	r2, r2, r5
 8000c74:	d420      	bmi.n	8000cb8 <_malloc_r+0xd0>
 8000c76:	2a0b      	cmp	r2, #11
 8000c78:	d917      	bls.n	8000caa <_malloc_r+0xc2>
 8000c7a:	1961      	adds	r1, r4, r5
 8000c7c:	42a3      	cmp	r3, r4
 8000c7e:	6025      	str	r5, [r4, #0]
 8000c80:	bf18      	it	ne
 8000c82:	6059      	strne	r1, [r3, #4]
 8000c84:	6863      	ldr	r3, [r4, #4]
 8000c86:	bf08      	it	eq
 8000c88:	f8c8 1000 	streq.w	r1, [r8]
 8000c8c:	5162      	str	r2, [r4, r5]
 8000c8e:	604b      	str	r3, [r1, #4]
 8000c90:	4630      	mov	r0, r6
 8000c92:	f000 f82f 	bl	8000cf4 <__malloc_unlock>
 8000c96:	f104 000b 	add.w	r0, r4, #11
 8000c9a:	1d23      	adds	r3, r4, #4
 8000c9c:	f020 0007 	bic.w	r0, r0, #7
 8000ca0:	1ac2      	subs	r2, r0, r3
 8000ca2:	bf1c      	itt	ne
 8000ca4:	1a1b      	subne	r3, r3, r0
 8000ca6:	50a3      	strne	r3, [r4, r2]
 8000ca8:	e7af      	b.n	8000c0a <_malloc_r+0x22>
 8000caa:	6862      	ldr	r2, [r4, #4]
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	bf0c      	ite	eq
 8000cb0:	f8c8 2000 	streq.w	r2, [r8]
 8000cb4:	605a      	strne	r2, [r3, #4]
 8000cb6:	e7eb      	b.n	8000c90 <_malloc_r+0xa8>
 8000cb8:	4623      	mov	r3, r4
 8000cba:	6864      	ldr	r4, [r4, #4]
 8000cbc:	e7ae      	b.n	8000c1c <_malloc_r+0x34>
 8000cbe:	463c      	mov	r4, r7
 8000cc0:	687f      	ldr	r7, [r7, #4]
 8000cc2:	e7b6      	b.n	8000c32 <_malloc_r+0x4a>
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	42a3      	cmp	r3, r4
 8000cca:	d1fb      	bne.n	8000cc4 <_malloc_r+0xdc>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	6053      	str	r3, [r2, #4]
 8000cd0:	e7de      	b.n	8000c90 <_malloc_r+0xa8>
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	6033      	str	r3, [r6, #0]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f000 f80c 	bl	8000cf4 <__malloc_unlock>
 8000cdc:	e794      	b.n	8000c08 <_malloc_r+0x20>
 8000cde:	6005      	str	r5, [r0, #0]
 8000ce0:	e7d6      	b.n	8000c90 <_malloc_r+0xa8>
 8000ce2:	bf00      	nop
 8000ce4:	200001c4 	.word	0x200001c4

08000ce8 <__malloc_lock>:
 8000ce8:	4801      	ldr	r0, [pc, #4]	@ (8000cf0 <__malloc_lock+0x8>)
 8000cea:	f7ff bf0e 	b.w	8000b0a <__retarget_lock_acquire_recursive>
 8000cee:	bf00      	nop
 8000cf0:	200001bc 	.word	0x200001bc

08000cf4 <__malloc_unlock>:
 8000cf4:	4801      	ldr	r0, [pc, #4]	@ (8000cfc <__malloc_unlock+0x8>)
 8000cf6:	f7ff bf09 	b.w	8000b0c <__retarget_lock_release_recursive>
 8000cfa:	bf00      	nop
 8000cfc:	200001bc 	.word	0x200001bc

08000d00 <__sfputc_r>:
 8000d00:	6893      	ldr	r3, [r2, #8]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	b410      	push	{r4}
 8000d08:	6093      	str	r3, [r2, #8]
 8000d0a:	da07      	bge.n	8000d1c <__sfputc_r+0x1c>
 8000d0c:	6994      	ldr	r4, [r2, #24]
 8000d0e:	42a3      	cmp	r3, r4
 8000d10:	db01      	blt.n	8000d16 <__sfputc_r+0x16>
 8000d12:	290a      	cmp	r1, #10
 8000d14:	d102      	bne.n	8000d1c <__sfputc_r+0x1c>
 8000d16:	bc10      	pop	{r4}
 8000d18:	f7ff bde9 	b.w	80008ee <__swbuf_r>
 8000d1c:	6813      	ldr	r3, [r2, #0]
 8000d1e:	1c58      	adds	r0, r3, #1
 8000d20:	6010      	str	r0, [r2, #0]
 8000d22:	7019      	strb	r1, [r3, #0]
 8000d24:	4608      	mov	r0, r1
 8000d26:	bc10      	pop	{r4}
 8000d28:	4770      	bx	lr

08000d2a <__sfputs_r>:
 8000d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2c:	4606      	mov	r6, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	4614      	mov	r4, r2
 8000d32:	18d5      	adds	r5, r2, r3
 8000d34:	42ac      	cmp	r4, r5
 8000d36:	d101      	bne.n	8000d3c <__sfputs_r+0x12>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	e007      	b.n	8000d4c <__sfputs_r+0x22>
 8000d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d40:	463a      	mov	r2, r7
 8000d42:	4630      	mov	r0, r6
 8000d44:	f7ff ffdc 	bl	8000d00 <__sfputc_r>
 8000d48:	1c43      	adds	r3, r0, #1
 8000d4a:	d1f3      	bne.n	8000d34 <__sfputs_r+0xa>
 8000d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d50 <_vfiprintf_r>:
 8000d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d54:	460d      	mov	r5, r1
 8000d56:	b09d      	sub	sp, #116	@ 0x74
 8000d58:	4614      	mov	r4, r2
 8000d5a:	4698      	mov	r8, r3
 8000d5c:	4606      	mov	r6, r0
 8000d5e:	b118      	cbz	r0, 8000d68 <_vfiprintf_r+0x18>
 8000d60:	6a03      	ldr	r3, [r0, #32]
 8000d62:	b90b      	cbnz	r3, 8000d68 <_vfiprintf_r+0x18>
 8000d64:	f7ff fcda 	bl	800071c <__sinit>
 8000d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d6a:	07d9      	lsls	r1, r3, #31
 8000d6c:	d405      	bmi.n	8000d7a <_vfiprintf_r+0x2a>
 8000d6e:	89ab      	ldrh	r3, [r5, #12]
 8000d70:	059a      	lsls	r2, r3, #22
 8000d72:	d402      	bmi.n	8000d7a <_vfiprintf_r+0x2a>
 8000d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d76:	f7ff fec8 	bl	8000b0a <__retarget_lock_acquire_recursive>
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	071b      	lsls	r3, r3, #28
 8000d7e:	d501      	bpl.n	8000d84 <_vfiprintf_r+0x34>
 8000d80:	692b      	ldr	r3, [r5, #16]
 8000d82:	b99b      	cbnz	r3, 8000dac <_vfiprintf_r+0x5c>
 8000d84:	4629      	mov	r1, r5
 8000d86:	4630      	mov	r0, r6
 8000d88:	f7ff fdf0 	bl	800096c <__swsetup_r>
 8000d8c:	b170      	cbz	r0, 8000dac <_vfiprintf_r+0x5c>
 8000d8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d90:	07dc      	lsls	r4, r3, #31
 8000d92:	d504      	bpl.n	8000d9e <_vfiprintf_r+0x4e>
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	b01d      	add	sp, #116	@ 0x74
 8000d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d9e:	89ab      	ldrh	r3, [r5, #12]
 8000da0:	0598      	lsls	r0, r3, #22
 8000da2:	d4f7      	bmi.n	8000d94 <_vfiprintf_r+0x44>
 8000da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000da6:	f7ff feb1 	bl	8000b0c <__retarget_lock_release_recursive>
 8000daa:	e7f3      	b.n	8000d94 <_vfiprintf_r+0x44>
 8000dac:	2300      	movs	r3, #0
 8000dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8000db0:	2320      	movs	r3, #32
 8000db2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dba:	2330      	movs	r3, #48	@ 0x30
 8000dbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f6c <_vfiprintf_r+0x21c>
 8000dc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000dc4:	f04f 0901 	mov.w	r9, #1
 8000dc8:	4623      	mov	r3, r4
 8000dca:	469a      	mov	sl, r3
 8000dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dd0:	b10a      	cbz	r2, 8000dd6 <_vfiprintf_r+0x86>
 8000dd2:	2a25      	cmp	r2, #37	@ 0x25
 8000dd4:	d1f9      	bne.n	8000dca <_vfiprintf_r+0x7a>
 8000dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8000dda:	d00b      	beq.n	8000df4 <_vfiprintf_r+0xa4>
 8000ddc:	465b      	mov	r3, fp
 8000dde:	4622      	mov	r2, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	4630      	mov	r0, r6
 8000de4:	f7ff ffa1 	bl	8000d2a <__sfputs_r>
 8000de8:	3001      	adds	r0, #1
 8000dea:	f000 80a7 	beq.w	8000f3c <_vfiprintf_r+0x1ec>
 8000dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000df0:	445a      	add	r2, fp
 8000df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000df4:	f89a 3000 	ldrb.w	r3, [sl]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 809f 	beq.w	8000f3c <_vfiprintf_r+0x1ec>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e08:	f10a 0a01 	add.w	sl, sl, #1
 8000e0c:	9304      	str	r3, [sp, #16]
 8000e0e:	9307      	str	r3, [sp, #28]
 8000e10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e14:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e16:	4654      	mov	r4, sl
 8000e18:	2205      	movs	r2, #5
 8000e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e1e:	4853      	ldr	r0, [pc, #332]	@ (8000f6c <_vfiprintf_r+0x21c>)
 8000e20:	f7ff f9f6 	bl	8000210 <memchr>
 8000e24:	9a04      	ldr	r2, [sp, #16]
 8000e26:	b9d8      	cbnz	r0, 8000e60 <_vfiprintf_r+0x110>
 8000e28:	06d1      	lsls	r1, r2, #27
 8000e2a:	bf44      	itt	mi
 8000e2c:	2320      	movmi	r3, #32
 8000e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e32:	0713      	lsls	r3, r2, #28
 8000e34:	bf44      	itt	mi
 8000e36:	232b      	movmi	r3, #43	@ 0x2b
 8000e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e42:	d015      	beq.n	8000e70 <_vfiprintf_r+0x120>
 8000e44:	9a07      	ldr	r2, [sp, #28]
 8000e46:	4654      	mov	r4, sl
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f04f 0c0a 	mov.w	ip, #10
 8000e4e:	4621      	mov	r1, r4
 8000e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e54:	3b30      	subs	r3, #48	@ 0x30
 8000e56:	2b09      	cmp	r3, #9
 8000e58:	d94b      	bls.n	8000ef2 <_vfiprintf_r+0x1a2>
 8000e5a:	b1b0      	cbz	r0, 8000e8a <_vfiprintf_r+0x13a>
 8000e5c:	9207      	str	r2, [sp, #28]
 8000e5e:	e014      	b.n	8000e8a <_vfiprintf_r+0x13a>
 8000e60:	eba0 0308 	sub.w	r3, r0, r8
 8000e64:	fa09 f303 	lsl.w	r3, r9, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	9304      	str	r3, [sp, #16]
 8000e6c:	46a2      	mov	sl, r4
 8000e6e:	e7d2      	b.n	8000e16 <_vfiprintf_r+0xc6>
 8000e70:	9b03      	ldr	r3, [sp, #12]
 8000e72:	1d19      	adds	r1, r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	9103      	str	r1, [sp, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bfbb      	ittet	lt
 8000e7c:	425b      	neglt	r3, r3
 8000e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e82:	9307      	strge	r3, [sp, #28]
 8000e84:	9307      	strlt	r3, [sp, #28]
 8000e86:	bfb8      	it	lt
 8000e88:	9204      	strlt	r2, [sp, #16]
 8000e8a:	7823      	ldrb	r3, [r4, #0]
 8000e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e8e:	d10a      	bne.n	8000ea6 <_vfiprintf_r+0x156>
 8000e90:	7863      	ldrb	r3, [r4, #1]
 8000e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e94:	d132      	bne.n	8000efc <_vfiprintf_r+0x1ac>
 8000e96:	9b03      	ldr	r3, [sp, #12]
 8000e98:	1d1a      	adds	r2, r3, #4
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	9203      	str	r2, [sp, #12]
 8000e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000ea2:	3402      	adds	r4, #2
 8000ea4:	9305      	str	r3, [sp, #20]
 8000ea6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000f70 <_vfiprintf_r+0x220>
 8000eaa:	7821      	ldrb	r1, [r4, #0]
 8000eac:	2203      	movs	r2, #3
 8000eae:	4650      	mov	r0, sl
 8000eb0:	f7ff f9ae 	bl	8000210 <memchr>
 8000eb4:	b138      	cbz	r0, 8000ec6 <_vfiprintf_r+0x176>
 8000eb6:	9b04      	ldr	r3, [sp, #16]
 8000eb8:	eba0 000a 	sub.w	r0, r0, sl
 8000ebc:	2240      	movs	r2, #64	@ 0x40
 8000ebe:	4082      	lsls	r2, r0
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	3401      	adds	r4, #1
 8000ec4:	9304      	str	r3, [sp, #16]
 8000ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eca:	482a      	ldr	r0, [pc, #168]	@ (8000f74 <_vfiprintf_r+0x224>)
 8000ecc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ed0:	2206      	movs	r2, #6
 8000ed2:	f7ff f99d 	bl	8000210 <memchr>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d03f      	beq.n	8000f5a <_vfiprintf_r+0x20a>
 8000eda:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <_vfiprintf_r+0x228>)
 8000edc:	bb1b      	cbnz	r3, 8000f26 <_vfiprintf_r+0x1d6>
 8000ede:	9b03      	ldr	r3, [sp, #12]
 8000ee0:	3307      	adds	r3, #7
 8000ee2:	f023 0307 	bic.w	r3, r3, #7
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	9303      	str	r3, [sp, #12]
 8000eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000eec:	443b      	add	r3, r7
 8000eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ef0:	e76a      	b.n	8000dc8 <_vfiprintf_r+0x78>
 8000ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ef6:	460c      	mov	r4, r1
 8000ef8:	2001      	movs	r0, #1
 8000efa:	e7a8      	b.n	8000e4e <_vfiprintf_r+0xfe>
 8000efc:	2300      	movs	r3, #0
 8000efe:	3401      	adds	r4, #1
 8000f00:	9305      	str	r3, [sp, #20]
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 0c0a 	mov.w	ip, #10
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f0e:	3a30      	subs	r2, #48	@ 0x30
 8000f10:	2a09      	cmp	r2, #9
 8000f12:	d903      	bls.n	8000f1c <_vfiprintf_r+0x1cc>
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0c6      	beq.n	8000ea6 <_vfiprintf_r+0x156>
 8000f18:	9105      	str	r1, [sp, #20]
 8000f1a:	e7c4      	b.n	8000ea6 <_vfiprintf_r+0x156>
 8000f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f20:	4604      	mov	r4, r0
 8000f22:	2301      	movs	r3, #1
 8000f24:	e7f0      	b.n	8000f08 <_vfiprintf_r+0x1b8>
 8000f26:	ab03      	add	r3, sp, #12
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	462a      	mov	r2, r5
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_vfiprintf_r+0x22c>)
 8000f2e:	a904      	add	r1, sp, #16
 8000f30:	4630      	mov	r0, r6
 8000f32:	f3af 8000 	nop.w
 8000f36:	4607      	mov	r7, r0
 8000f38:	1c78      	adds	r0, r7, #1
 8000f3a:	d1d6      	bne.n	8000eea <_vfiprintf_r+0x19a>
 8000f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f3e:	07d9      	lsls	r1, r3, #31
 8000f40:	d405      	bmi.n	8000f4e <_vfiprintf_r+0x1fe>
 8000f42:	89ab      	ldrh	r3, [r5, #12]
 8000f44:	059a      	lsls	r2, r3, #22
 8000f46:	d402      	bmi.n	8000f4e <_vfiprintf_r+0x1fe>
 8000f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f4a:	f7ff fddf 	bl	8000b0c <__retarget_lock_release_recursive>
 8000f4e:	89ab      	ldrh	r3, [r5, #12]
 8000f50:	065b      	lsls	r3, r3, #25
 8000f52:	f53f af1f 	bmi.w	8000d94 <_vfiprintf_r+0x44>
 8000f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f58:	e71e      	b.n	8000d98 <_vfiprintf_r+0x48>
 8000f5a:	ab03      	add	r3, sp, #12
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	462a      	mov	r2, r5
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <_vfiprintf_r+0x22c>)
 8000f62:	a904      	add	r1, sp, #16
 8000f64:	4630      	mov	r0, r6
 8000f66:	f000 f879 	bl	800105c <_printf_i>
 8000f6a:	e7e4      	b.n	8000f36 <_vfiprintf_r+0x1e6>
 8000f6c:	0800165d 	.word	0x0800165d
 8000f70:	08001663 	.word	0x08001663
 8000f74:	08001667 	.word	0x08001667
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	08000d2b 	.word	0x08000d2b

08000f80 <_printf_common>:
 8000f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f84:	4616      	mov	r6, r2
 8000f86:	4698      	mov	r8, r3
 8000f88:	688a      	ldr	r2, [r1, #8]
 8000f8a:	690b      	ldr	r3, [r1, #16]
 8000f8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f90:	4293      	cmp	r3, r2
 8000f92:	bfb8      	it	lt
 8000f94:	4613      	movlt	r3, r2
 8000f96:	6033      	str	r3, [r6, #0]
 8000f98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f9c:	4607      	mov	r7, r0
 8000f9e:	460c      	mov	r4, r1
 8000fa0:	b10a      	cbz	r2, 8000fa6 <_printf_common+0x26>
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	6033      	str	r3, [r6, #0]
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	0699      	lsls	r1, r3, #26
 8000faa:	bf42      	ittt	mi
 8000fac:	6833      	ldrmi	r3, [r6, #0]
 8000fae:	3302      	addmi	r3, #2
 8000fb0:	6033      	strmi	r3, [r6, #0]
 8000fb2:	6825      	ldr	r5, [r4, #0]
 8000fb4:	f015 0506 	ands.w	r5, r5, #6
 8000fb8:	d106      	bne.n	8000fc8 <_printf_common+0x48>
 8000fba:	f104 0a19 	add.w	sl, r4, #25
 8000fbe:	68e3      	ldr	r3, [r4, #12]
 8000fc0:	6832      	ldr	r2, [r6, #0]
 8000fc2:	1a9b      	subs	r3, r3, r2
 8000fc4:	42ab      	cmp	r3, r5
 8000fc6:	dc26      	bgt.n	8001016 <_printf_common+0x96>
 8000fc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	3b00      	subs	r3, #0
 8000fd0:	bf18      	it	ne
 8000fd2:	2301      	movne	r3, #1
 8000fd4:	0692      	lsls	r2, r2, #26
 8000fd6:	d42b      	bmi.n	8001030 <_printf_common+0xb0>
 8000fd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4638      	mov	r0, r7
 8000fe0:	47c8      	blx	r9
 8000fe2:	3001      	adds	r0, #1
 8000fe4:	d01e      	beq.n	8001024 <_printf_common+0xa4>
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	6922      	ldr	r2, [r4, #16]
 8000fea:	f003 0306 	and.w	r3, r3, #6
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf02      	ittt	eq
 8000ff2:	68e5      	ldreq	r5, [r4, #12]
 8000ff4:	6833      	ldreq	r3, [r6, #0]
 8000ff6:	1aed      	subeq	r5, r5, r3
 8000ff8:	68a3      	ldr	r3, [r4, #8]
 8000ffa:	bf0c      	ite	eq
 8000ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001000:	2500      	movne	r5, #0
 8001002:	4293      	cmp	r3, r2
 8001004:	bfc4      	itt	gt
 8001006:	1a9b      	subgt	r3, r3, r2
 8001008:	18ed      	addgt	r5, r5, r3
 800100a:	2600      	movs	r6, #0
 800100c:	341a      	adds	r4, #26
 800100e:	42b5      	cmp	r5, r6
 8001010:	d11a      	bne.n	8001048 <_printf_common+0xc8>
 8001012:	2000      	movs	r0, #0
 8001014:	e008      	b.n	8001028 <_printf_common+0xa8>
 8001016:	2301      	movs	r3, #1
 8001018:	4652      	mov	r2, sl
 800101a:	4641      	mov	r1, r8
 800101c:	4638      	mov	r0, r7
 800101e:	47c8      	blx	r9
 8001020:	3001      	adds	r0, #1
 8001022:	d103      	bne.n	800102c <_printf_common+0xac>
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102c:	3501      	adds	r5, #1
 800102e:	e7c6      	b.n	8000fbe <_printf_common+0x3e>
 8001030:	18e1      	adds	r1, r4, r3
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	2030      	movs	r0, #48	@ 0x30
 8001036:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800103a:	4422      	add	r2, r4
 800103c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001040:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001044:	3302      	adds	r3, #2
 8001046:	e7c7      	b.n	8000fd8 <_printf_common+0x58>
 8001048:	2301      	movs	r3, #1
 800104a:	4622      	mov	r2, r4
 800104c:	4641      	mov	r1, r8
 800104e:	4638      	mov	r0, r7
 8001050:	47c8      	blx	r9
 8001052:	3001      	adds	r0, #1
 8001054:	d0e6      	beq.n	8001024 <_printf_common+0xa4>
 8001056:	3601      	adds	r6, #1
 8001058:	e7d9      	b.n	800100e <_printf_common+0x8e>
	...

0800105c <_printf_i>:
 800105c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001060:	7e0f      	ldrb	r7, [r1, #24]
 8001062:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001064:	2f78      	cmp	r7, #120	@ 0x78
 8001066:	4691      	mov	r9, r2
 8001068:	4680      	mov	r8, r0
 800106a:	460c      	mov	r4, r1
 800106c:	469a      	mov	sl, r3
 800106e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001072:	d807      	bhi.n	8001084 <_printf_i+0x28>
 8001074:	2f62      	cmp	r7, #98	@ 0x62
 8001076:	d80a      	bhi.n	800108e <_printf_i+0x32>
 8001078:	2f00      	cmp	r7, #0
 800107a:	f000 80d2 	beq.w	8001222 <_printf_i+0x1c6>
 800107e:	2f58      	cmp	r7, #88	@ 0x58
 8001080:	f000 80b9 	beq.w	80011f6 <_printf_i+0x19a>
 8001084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001088:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800108c:	e03a      	b.n	8001104 <_printf_i+0xa8>
 800108e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001092:	2b15      	cmp	r3, #21
 8001094:	d8f6      	bhi.n	8001084 <_printf_i+0x28>
 8001096:	a101      	add	r1, pc, #4	@ (adr r1, 800109c <_printf_i+0x40>)
 8001098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800109c:	080010f5 	.word	0x080010f5
 80010a0:	08001109 	.word	0x08001109
 80010a4:	08001085 	.word	0x08001085
 80010a8:	08001085 	.word	0x08001085
 80010ac:	08001085 	.word	0x08001085
 80010b0:	08001085 	.word	0x08001085
 80010b4:	08001109 	.word	0x08001109
 80010b8:	08001085 	.word	0x08001085
 80010bc:	08001085 	.word	0x08001085
 80010c0:	08001085 	.word	0x08001085
 80010c4:	08001085 	.word	0x08001085
 80010c8:	08001209 	.word	0x08001209
 80010cc:	08001133 	.word	0x08001133
 80010d0:	080011c3 	.word	0x080011c3
 80010d4:	08001085 	.word	0x08001085
 80010d8:	08001085 	.word	0x08001085
 80010dc:	0800122b 	.word	0x0800122b
 80010e0:	08001085 	.word	0x08001085
 80010e4:	08001133 	.word	0x08001133
 80010e8:	08001085 	.word	0x08001085
 80010ec:	08001085 	.word	0x08001085
 80010f0:	080011cb 	.word	0x080011cb
 80010f4:	6833      	ldr	r3, [r6, #0]
 80010f6:	1d1a      	adds	r2, r3, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6032      	str	r2, [r6, #0]
 80010fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001100:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001104:	2301      	movs	r3, #1
 8001106:	e09d      	b.n	8001244 <_printf_i+0x1e8>
 8001108:	6833      	ldr	r3, [r6, #0]
 800110a:	6820      	ldr	r0, [r4, #0]
 800110c:	1d19      	adds	r1, r3, #4
 800110e:	6031      	str	r1, [r6, #0]
 8001110:	0606      	lsls	r6, r0, #24
 8001112:	d501      	bpl.n	8001118 <_printf_i+0xbc>
 8001114:	681d      	ldr	r5, [r3, #0]
 8001116:	e003      	b.n	8001120 <_printf_i+0xc4>
 8001118:	0645      	lsls	r5, r0, #25
 800111a:	d5fb      	bpl.n	8001114 <_printf_i+0xb8>
 800111c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001120:	2d00      	cmp	r5, #0
 8001122:	da03      	bge.n	800112c <_printf_i+0xd0>
 8001124:	232d      	movs	r3, #45	@ 0x2d
 8001126:	426d      	negs	r5, r5
 8001128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800112c:	4859      	ldr	r0, [pc, #356]	@ (8001294 <_printf_i+0x238>)
 800112e:	230a      	movs	r3, #10
 8001130:	e011      	b.n	8001156 <_printf_i+0xfa>
 8001132:	6821      	ldr	r1, [r4, #0]
 8001134:	6833      	ldr	r3, [r6, #0]
 8001136:	0608      	lsls	r0, r1, #24
 8001138:	f853 5b04 	ldr.w	r5, [r3], #4
 800113c:	d402      	bmi.n	8001144 <_printf_i+0xe8>
 800113e:	0649      	lsls	r1, r1, #25
 8001140:	bf48      	it	mi
 8001142:	b2ad      	uxthmi	r5, r5
 8001144:	2f6f      	cmp	r7, #111	@ 0x6f
 8001146:	4853      	ldr	r0, [pc, #332]	@ (8001294 <_printf_i+0x238>)
 8001148:	6033      	str	r3, [r6, #0]
 800114a:	bf14      	ite	ne
 800114c:	230a      	movne	r3, #10
 800114e:	2308      	moveq	r3, #8
 8001150:	2100      	movs	r1, #0
 8001152:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001156:	6866      	ldr	r6, [r4, #4]
 8001158:	60a6      	str	r6, [r4, #8]
 800115a:	2e00      	cmp	r6, #0
 800115c:	bfa2      	ittt	ge
 800115e:	6821      	ldrge	r1, [r4, #0]
 8001160:	f021 0104 	bicge.w	r1, r1, #4
 8001164:	6021      	strge	r1, [r4, #0]
 8001166:	b90d      	cbnz	r5, 800116c <_printf_i+0x110>
 8001168:	2e00      	cmp	r6, #0
 800116a:	d04b      	beq.n	8001204 <_printf_i+0x1a8>
 800116c:	4616      	mov	r6, r2
 800116e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001172:	fb03 5711 	mls	r7, r3, r1, r5
 8001176:	5dc7      	ldrb	r7, [r0, r7]
 8001178:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800117c:	462f      	mov	r7, r5
 800117e:	42bb      	cmp	r3, r7
 8001180:	460d      	mov	r5, r1
 8001182:	d9f4      	bls.n	800116e <_printf_i+0x112>
 8001184:	2b08      	cmp	r3, #8
 8001186:	d10b      	bne.n	80011a0 <_printf_i+0x144>
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	07df      	lsls	r7, r3, #31
 800118c:	d508      	bpl.n	80011a0 <_printf_i+0x144>
 800118e:	6923      	ldr	r3, [r4, #16]
 8001190:	6861      	ldr	r1, [r4, #4]
 8001192:	4299      	cmp	r1, r3
 8001194:	bfde      	ittt	le
 8001196:	2330      	movle	r3, #48	@ 0x30
 8001198:	f806 3c01 	strble.w	r3, [r6, #-1]
 800119c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80011a0:	1b92      	subs	r2, r2, r6
 80011a2:	6122      	str	r2, [r4, #16]
 80011a4:	f8cd a000 	str.w	sl, [sp]
 80011a8:	464b      	mov	r3, r9
 80011aa:	aa03      	add	r2, sp, #12
 80011ac:	4621      	mov	r1, r4
 80011ae:	4640      	mov	r0, r8
 80011b0:	f7ff fee6 	bl	8000f80 <_printf_common>
 80011b4:	3001      	adds	r0, #1
 80011b6:	d14a      	bne.n	800124e <_printf_i+0x1f2>
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	b004      	add	sp, #16
 80011be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	4833      	ldr	r0, [pc, #204]	@ (8001298 <_printf_i+0x23c>)
 80011cc:	2778      	movs	r7, #120	@ 0x78
 80011ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	6831      	ldr	r1, [r6, #0]
 80011d6:	061f      	lsls	r7, r3, #24
 80011d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80011dc:	d402      	bmi.n	80011e4 <_printf_i+0x188>
 80011de:	065f      	lsls	r7, r3, #25
 80011e0:	bf48      	it	mi
 80011e2:	b2ad      	uxthmi	r5, r5
 80011e4:	6031      	str	r1, [r6, #0]
 80011e6:	07d9      	lsls	r1, r3, #31
 80011e8:	bf44      	itt	mi
 80011ea:	f043 0320 	orrmi.w	r3, r3, #32
 80011ee:	6023      	strmi	r3, [r4, #0]
 80011f0:	b11d      	cbz	r5, 80011fa <_printf_i+0x19e>
 80011f2:	2310      	movs	r3, #16
 80011f4:	e7ac      	b.n	8001150 <_printf_i+0xf4>
 80011f6:	4827      	ldr	r0, [pc, #156]	@ (8001294 <_printf_i+0x238>)
 80011f8:	e7e9      	b.n	80011ce <_printf_i+0x172>
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	f023 0320 	bic.w	r3, r3, #32
 8001200:	6023      	str	r3, [r4, #0]
 8001202:	e7f6      	b.n	80011f2 <_printf_i+0x196>
 8001204:	4616      	mov	r6, r2
 8001206:	e7bd      	b.n	8001184 <_printf_i+0x128>
 8001208:	6833      	ldr	r3, [r6, #0]
 800120a:	6825      	ldr	r5, [r4, #0]
 800120c:	6961      	ldr	r1, [r4, #20]
 800120e:	1d18      	adds	r0, r3, #4
 8001210:	6030      	str	r0, [r6, #0]
 8001212:	062e      	lsls	r6, r5, #24
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	d501      	bpl.n	800121c <_printf_i+0x1c0>
 8001218:	6019      	str	r1, [r3, #0]
 800121a:	e002      	b.n	8001222 <_printf_i+0x1c6>
 800121c:	0668      	lsls	r0, r5, #25
 800121e:	d5fb      	bpl.n	8001218 <_printf_i+0x1bc>
 8001220:	8019      	strh	r1, [r3, #0]
 8001222:	2300      	movs	r3, #0
 8001224:	6123      	str	r3, [r4, #16]
 8001226:	4616      	mov	r6, r2
 8001228:	e7bc      	b.n	80011a4 <_printf_i+0x148>
 800122a:	6833      	ldr	r3, [r6, #0]
 800122c:	1d1a      	adds	r2, r3, #4
 800122e:	6032      	str	r2, [r6, #0]
 8001230:	681e      	ldr	r6, [r3, #0]
 8001232:	6862      	ldr	r2, [r4, #4]
 8001234:	2100      	movs	r1, #0
 8001236:	4630      	mov	r0, r6
 8001238:	f7fe ffea 	bl	8000210 <memchr>
 800123c:	b108      	cbz	r0, 8001242 <_printf_i+0x1e6>
 800123e:	1b80      	subs	r0, r0, r6
 8001240:	6060      	str	r0, [r4, #4]
 8001242:	6863      	ldr	r3, [r4, #4]
 8001244:	6123      	str	r3, [r4, #16]
 8001246:	2300      	movs	r3, #0
 8001248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800124c:	e7aa      	b.n	80011a4 <_printf_i+0x148>
 800124e:	6923      	ldr	r3, [r4, #16]
 8001250:	4632      	mov	r2, r6
 8001252:	4649      	mov	r1, r9
 8001254:	4640      	mov	r0, r8
 8001256:	47d0      	blx	sl
 8001258:	3001      	adds	r0, #1
 800125a:	d0ad      	beq.n	80011b8 <_printf_i+0x15c>
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	079b      	lsls	r3, r3, #30
 8001260:	d413      	bmi.n	800128a <_printf_i+0x22e>
 8001262:	68e0      	ldr	r0, [r4, #12]
 8001264:	9b03      	ldr	r3, [sp, #12]
 8001266:	4298      	cmp	r0, r3
 8001268:	bfb8      	it	lt
 800126a:	4618      	movlt	r0, r3
 800126c:	e7a6      	b.n	80011bc <_printf_i+0x160>
 800126e:	2301      	movs	r3, #1
 8001270:	4632      	mov	r2, r6
 8001272:	4649      	mov	r1, r9
 8001274:	4640      	mov	r0, r8
 8001276:	47d0      	blx	sl
 8001278:	3001      	adds	r0, #1
 800127a:	d09d      	beq.n	80011b8 <_printf_i+0x15c>
 800127c:	3501      	adds	r5, #1
 800127e:	68e3      	ldr	r3, [r4, #12]
 8001280:	9903      	ldr	r1, [sp, #12]
 8001282:	1a5b      	subs	r3, r3, r1
 8001284:	42ab      	cmp	r3, r5
 8001286:	dcf2      	bgt.n	800126e <_printf_i+0x212>
 8001288:	e7eb      	b.n	8001262 <_printf_i+0x206>
 800128a:	2500      	movs	r5, #0
 800128c:	f104 0619 	add.w	r6, r4, #25
 8001290:	e7f5      	b.n	800127e <_printf_i+0x222>
 8001292:	bf00      	nop
 8001294:	0800166e 	.word	0x0800166e
 8001298:	0800167f 	.word	0x0800167f

0800129c <__sflush_r>:
 800129c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	0716      	lsls	r6, r2, #28
 80012a4:	4605      	mov	r5, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	d454      	bmi.n	8001354 <__sflush_r+0xb8>
 80012aa:	684b      	ldr	r3, [r1, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dc02      	bgt.n	80012b6 <__sflush_r+0x1a>
 80012b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	dd48      	ble.n	8001348 <__sflush_r+0xac>
 80012b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012b8:	2e00      	cmp	r6, #0
 80012ba:	d045      	beq.n	8001348 <__sflush_r+0xac>
 80012bc:	2300      	movs	r3, #0
 80012be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012c2:	682f      	ldr	r7, [r5, #0]
 80012c4:	6a21      	ldr	r1, [r4, #32]
 80012c6:	602b      	str	r3, [r5, #0]
 80012c8:	d030      	beq.n	800132c <__sflush_r+0x90>
 80012ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	0759      	lsls	r1, r3, #29
 80012d0:	d505      	bpl.n	80012de <__sflush_r+0x42>
 80012d2:	6863      	ldr	r3, [r4, #4]
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012d8:	b10b      	cbz	r3, 80012de <__sflush_r+0x42>
 80012da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012dc:	1ad2      	subs	r2, r2, r3
 80012de:	2300      	movs	r3, #0
 80012e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012e2:	6a21      	ldr	r1, [r4, #32]
 80012e4:	4628      	mov	r0, r5
 80012e6:	47b0      	blx	r6
 80012e8:	1c43      	adds	r3, r0, #1
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	d106      	bne.n	80012fc <__sflush_r+0x60>
 80012ee:	6829      	ldr	r1, [r5, #0]
 80012f0:	291d      	cmp	r1, #29
 80012f2:	d82b      	bhi.n	800134c <__sflush_r+0xb0>
 80012f4:	4a28      	ldr	r2, [pc, #160]	@ (8001398 <__sflush_r+0xfc>)
 80012f6:	410a      	asrs	r2, r1
 80012f8:	07d6      	lsls	r6, r2, #31
 80012fa:	d427      	bmi.n	800134c <__sflush_r+0xb0>
 80012fc:	2200      	movs	r2, #0
 80012fe:	6062      	str	r2, [r4, #4]
 8001300:	04d9      	lsls	r1, r3, #19
 8001302:	6922      	ldr	r2, [r4, #16]
 8001304:	6022      	str	r2, [r4, #0]
 8001306:	d504      	bpl.n	8001312 <__sflush_r+0x76>
 8001308:	1c42      	adds	r2, r0, #1
 800130a:	d101      	bne.n	8001310 <__sflush_r+0x74>
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	b903      	cbnz	r3, 8001312 <__sflush_r+0x76>
 8001310:	6560      	str	r0, [r4, #84]	@ 0x54
 8001312:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001314:	602f      	str	r7, [r5, #0]
 8001316:	b1b9      	cbz	r1, 8001348 <__sflush_r+0xac>
 8001318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800131c:	4299      	cmp	r1, r3
 800131e:	d002      	beq.n	8001326 <__sflush_r+0x8a>
 8001320:	4628      	mov	r0, r5
 8001322:	f7ff fbf5 	bl	8000b10 <_free_r>
 8001326:	2300      	movs	r3, #0
 8001328:	6363      	str	r3, [r4, #52]	@ 0x34
 800132a:	e00d      	b.n	8001348 <__sflush_r+0xac>
 800132c:	2301      	movs	r3, #1
 800132e:	4628      	mov	r0, r5
 8001330:	47b0      	blx	r6
 8001332:	4602      	mov	r2, r0
 8001334:	1c50      	adds	r0, r2, #1
 8001336:	d1c9      	bne.n	80012cc <__sflush_r+0x30>
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0c6      	beq.n	80012cc <__sflush_r+0x30>
 800133e:	2b1d      	cmp	r3, #29
 8001340:	d001      	beq.n	8001346 <__sflush_r+0xaa>
 8001342:	2b16      	cmp	r3, #22
 8001344:	d11d      	bne.n	8001382 <__sflush_r+0xe6>
 8001346:	602f      	str	r7, [r5, #0]
 8001348:	2000      	movs	r0, #0
 800134a:	e021      	b.n	8001390 <__sflush_r+0xf4>
 800134c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001350:	b21b      	sxth	r3, r3
 8001352:	e01a      	b.n	800138a <__sflush_r+0xee>
 8001354:	690f      	ldr	r7, [r1, #16]
 8001356:	2f00      	cmp	r7, #0
 8001358:	d0f6      	beq.n	8001348 <__sflush_r+0xac>
 800135a:	0793      	lsls	r3, r2, #30
 800135c:	680e      	ldr	r6, [r1, #0]
 800135e:	bf08      	it	eq
 8001360:	694b      	ldreq	r3, [r1, #20]
 8001362:	600f      	str	r7, [r1, #0]
 8001364:	bf18      	it	ne
 8001366:	2300      	movne	r3, #0
 8001368:	1bf6      	subs	r6, r6, r7
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	2e00      	cmp	r6, #0
 800136e:	ddeb      	ble.n	8001348 <__sflush_r+0xac>
 8001370:	6a21      	ldr	r1, [r4, #32]
 8001372:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001376:	4633      	mov	r3, r6
 8001378:	463a      	mov	r2, r7
 800137a:	4628      	mov	r0, r5
 800137c:	47e0      	blx	ip
 800137e:	2800      	cmp	r0, #0
 8001380:	dc07      	bgt.n	8001392 <__sflush_r+0xf6>
 8001382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138a:	81a3      	strh	r3, [r4, #12]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001392:	4407      	add	r7, r0
 8001394:	1a36      	subs	r6, r6, r0
 8001396:	e7e9      	b.n	800136c <__sflush_r+0xd0>
 8001398:	dfbffffe 	.word	0xdfbffffe

0800139c <_fflush_r>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	690b      	ldr	r3, [r1, #16]
 80013a0:	4605      	mov	r5, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	b913      	cbnz	r3, 80013ac <_fflush_r+0x10>
 80013a6:	2500      	movs	r5, #0
 80013a8:	4628      	mov	r0, r5
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
 80013ac:	b118      	cbz	r0, 80013b6 <_fflush_r+0x1a>
 80013ae:	6a03      	ldr	r3, [r0, #32]
 80013b0:	b90b      	cbnz	r3, 80013b6 <_fflush_r+0x1a>
 80013b2:	f7ff f9b3 	bl	800071c <__sinit>
 80013b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f3      	beq.n	80013a6 <_fflush_r+0xa>
 80013be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013c0:	07d0      	lsls	r0, r2, #31
 80013c2:	d404      	bmi.n	80013ce <_fflush_r+0x32>
 80013c4:	0599      	lsls	r1, r3, #22
 80013c6:	d402      	bmi.n	80013ce <_fflush_r+0x32>
 80013c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013ca:	f7ff fb9e 	bl	8000b0a <__retarget_lock_acquire_recursive>
 80013ce:	4628      	mov	r0, r5
 80013d0:	4621      	mov	r1, r4
 80013d2:	f7ff ff63 	bl	800129c <__sflush_r>
 80013d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013d8:	07da      	lsls	r2, r3, #31
 80013da:	4605      	mov	r5, r0
 80013dc:	d4e4      	bmi.n	80013a8 <_fflush_r+0xc>
 80013de:	89a3      	ldrh	r3, [r4, #12]
 80013e0:	059b      	lsls	r3, r3, #22
 80013e2:	d4e1      	bmi.n	80013a8 <_fflush_r+0xc>
 80013e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013e6:	f7ff fb91 	bl	8000b0c <__retarget_lock_release_recursive>
 80013ea:	e7dd      	b.n	80013a8 <_fflush_r+0xc>

080013ec <__swhatbuf_r>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	460c      	mov	r4, r1
 80013f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013f4:	2900      	cmp	r1, #0
 80013f6:	b096      	sub	sp, #88	@ 0x58
 80013f8:	4615      	mov	r5, r2
 80013fa:	461e      	mov	r6, r3
 80013fc:	da0d      	bge.n	800141a <__swhatbuf_r+0x2e>
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001404:	f04f 0100 	mov.w	r1, #0
 8001408:	bf14      	ite	ne
 800140a:	2340      	movne	r3, #64	@ 0x40
 800140c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001410:	2000      	movs	r0, #0
 8001412:	6031      	str	r1, [r6, #0]
 8001414:	602b      	str	r3, [r5, #0]
 8001416:	b016      	add	sp, #88	@ 0x58
 8001418:	bd70      	pop	{r4, r5, r6, pc}
 800141a:	466a      	mov	r2, sp
 800141c:	f000 f848 	bl	80014b0 <_fstat_r>
 8001420:	2800      	cmp	r0, #0
 8001422:	dbec      	blt.n	80013fe <__swhatbuf_r+0x12>
 8001424:	9901      	ldr	r1, [sp, #4]
 8001426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800142a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800142e:	4259      	negs	r1, r3
 8001430:	4159      	adcs	r1, r3
 8001432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001436:	e7eb      	b.n	8001410 <__swhatbuf_r+0x24>

08001438 <__smakebuf_r>:
 8001438:	898b      	ldrh	r3, [r1, #12]
 800143a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800143c:	079d      	lsls	r5, r3, #30
 800143e:	4606      	mov	r6, r0
 8001440:	460c      	mov	r4, r1
 8001442:	d507      	bpl.n	8001454 <__smakebuf_r+0x1c>
 8001444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001448:	6023      	str	r3, [r4, #0]
 800144a:	6123      	str	r3, [r4, #16]
 800144c:	2301      	movs	r3, #1
 800144e:	6163      	str	r3, [r4, #20]
 8001450:	b003      	add	sp, #12
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	ab01      	add	r3, sp, #4
 8001456:	466a      	mov	r2, sp
 8001458:	f7ff ffc8 	bl	80013ec <__swhatbuf_r>
 800145c:	9f00      	ldr	r7, [sp, #0]
 800145e:	4605      	mov	r5, r0
 8001460:	4639      	mov	r1, r7
 8001462:	4630      	mov	r0, r6
 8001464:	f7ff fbc0 	bl	8000be8 <_malloc_r>
 8001468:	b948      	cbnz	r0, 800147e <__smakebuf_r+0x46>
 800146a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800146e:	059a      	lsls	r2, r3, #22
 8001470:	d4ee      	bmi.n	8001450 <__smakebuf_r+0x18>
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	81a3      	strh	r3, [r4, #12]
 800147c:	e7e2      	b.n	8001444 <__smakebuf_r+0xc>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	6020      	str	r0, [r4, #0]
 8001482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	9b01      	ldr	r3, [sp, #4]
 800148a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800148e:	b15b      	cbz	r3, 80014a8 <__smakebuf_r+0x70>
 8001490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001494:	4630      	mov	r0, r6
 8001496:	f000 f81d 	bl	80014d4 <_isatty_r>
 800149a:	b128      	cbz	r0, 80014a8 <__smakebuf_r+0x70>
 800149c:	89a3      	ldrh	r3, [r4, #12]
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	81a3      	strh	r3, [r4, #12]
 80014a8:	89a3      	ldrh	r3, [r4, #12]
 80014aa:	431d      	orrs	r5, r3
 80014ac:	81a5      	strh	r5, [r4, #12]
 80014ae:	e7cf      	b.n	8001450 <__smakebuf_r+0x18>

080014b0 <_fstat_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4d07      	ldr	r5, [pc, #28]	@ (80014d0 <_fstat_r+0x20>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	f7ff f81b 	bl	80004f8 <_fstat>
 80014c2:	1c43      	adds	r3, r0, #1
 80014c4:	d102      	bne.n	80014cc <_fstat_r+0x1c>
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	b103      	cbz	r3, 80014cc <_fstat_r+0x1c>
 80014ca:	6023      	str	r3, [r4, #0]
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	bf00      	nop
 80014d0:	200001b8 	.word	0x200001b8

080014d4 <_isatty_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d06      	ldr	r5, [pc, #24]	@ (80014f0 <_isatty_r+0x1c>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7ff f819 	bl	8000516 <_isatty>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_isatty_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_isatty_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200001b8 	.word	0x200001b8

080014f4 <_sbrk_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4d06      	ldr	r5, [pc, #24]	@ (8001510 <_sbrk_r+0x1c>)
 80014f8:	2300      	movs	r3, #0
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	602b      	str	r3, [r5, #0]
 8001500:	f7ff f820 	bl	8000544 <_sbrk>
 8001504:	1c43      	adds	r3, r0, #1
 8001506:	d102      	bne.n	800150e <_sbrk_r+0x1a>
 8001508:	682b      	ldr	r3, [r5, #0]
 800150a:	b103      	cbz	r3, 800150e <_sbrk_r+0x1a>
 800150c:	6023      	str	r3, [r4, #0]
 800150e:	bd38      	pop	{r3, r4, r5, pc}
 8001510:	200001b8 	.word	0x200001b8

08001514 <_init>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr

08001520 <_fini>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr

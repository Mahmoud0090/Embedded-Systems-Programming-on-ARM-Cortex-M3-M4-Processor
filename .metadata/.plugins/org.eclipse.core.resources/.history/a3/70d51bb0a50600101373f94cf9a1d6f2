/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "main.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void task1_handler(void); //this is task 1
void task2_handler(void); //this is task 2
void task3_handler(void); //this is task 3
void task4_handler(void); //this is task 4 of the application


void init_systick_timer(uint32_t tick_hz);

void init_task_stack(void);

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack);



uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START,T2_STACK_START,T3_STACK_START,T4_STACK_START};

uint32_t task_handlers[MAX_TASKS];

int main(void)
{
	init_scheduler_stack(SCHED_STACK_START);

	task_handlers[0] = (uint32_t)task1_handler;
	task_handlers[1] = (uint32_t)task2_handler;
	task_handlers[2] = (uint32_t)task3_handler;
	task_handlers[3] = (uint32_t)task4_handler;

	init_task_stack();

    init_systick_timer(TICK_HZ);
	for(;;);
}

void task1_handler(void)
{
	while(1)
	{
		printf("this is task1\n");
	}
}
void task2_handler(void)
{
	while(1)
	{
		printf("this is task2\n");
	}

}
void task3_handler(void)
{
	while(1)
	{
		printf("this is task3\n");
	}

}
void task4_handler(void)
{
	while(1)
	{
		printf("this is task4\n");
	}

}

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t *)0xE000E014; // SysTick Reload Value Register
	uint32_t *pSCSR = (uint32_t *)0xE000E010; //SysTick Control and Status Register
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1;

	//clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);


	//load the value to SVR
	*pSRVR |= count_value;

	//do some setting
	*pSCSR |= (1 << 1); //  Enables SysTick exception request
	*pSCSR |= (1 << 2); //  Indicates the clock source, processor clock source

	//enable the systick
	*pSCSR |= (1 << 0); // enable the counter
}

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
	__asm volatile ("MSR MSP, %0" : : "r" (sched_top_of_stack) : );
	__asm volatile ("BX LR");
}


void init_task_stack(void)
{
	uint32_t* pPSP;

	for(int i = 0; i<MAX_TASKS ; i++)
	{
		pPSP = (uint32_t *)psp_of_tasks[i];

		pPSP--;
		*pPSP = DUMMY_XPSR; //0x01000000

		pPSP--;//PC
		*pPSP = task_handlers[i];

		pPSP--;//LR
		*pPSP = 0xFFFFFFFD;

		//R0 to R12

		for(int j = 0 ;i<13; j++)
		{
			pPSP--;
			*pPSP = 0;
		}

		//storing the value of psp
		psp_of_tasks[i] = (uint32_t)pPSP;
	}

}

void SysTick_Handler(void)
{


}

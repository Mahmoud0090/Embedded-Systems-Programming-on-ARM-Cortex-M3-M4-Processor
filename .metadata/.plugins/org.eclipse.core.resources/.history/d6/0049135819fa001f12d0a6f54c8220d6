/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>
#include <stdint.h>

int func_divide(int x , int y)
{
	return x/y;
}



int main(void)
{
    //1- enable all configurable exceptions, usage fault, mem manage fault and bus fault

	uint32_t* pSHCHR = (uint32_t *) 0xE000ED24;
	//*pSHCHR |= (7 << 16);

	*pSHCHR |= (1 << 16); //mem manage fault
	*pSHCHR |= (1 << 17); // bus fault
	//*pSHCHR |= (1 << 18); //usage fault (if not enabled in our example)
							//hardfault will be called


	//2- enable divide by zero trap
	uint32_t *pCCP = (uint32_t*) 0xE000ED14; //configuration & control register
	*pCCP |= (1<<4); // enable 4th bit for divide by zero

	//3- attemp to divide by zero
	func_divide(10,0);

	for(;;);
}

//2-implement the fault handler

void HardFault_Handler(void)
{
	printf("exception : Hardfault\n");
	while(1);

}
void MemManage_Handler(void)
{
	printf("exception : Mem manage fault\n");
	while(1);

}

void BusFault_Handler(void)
{
	printf("exception : Busfault\n");
	while(1);
}


//this naked func prevent the compiler from manipulating the stack pointer
//during the epilog and prolog of the c func
__attribute__((naked)) void UsageFault_Handler(void)
{
	//here we extract the value of MSP which happens to be
	//the base address of the stack frame (thread mode) which got saved
	//during the exception entry from thread mode to handler mode
	__asm("MRS r0 , MSP");
	__asm("B UsageFault_Handler_c");
}

// the R0 value from the above UsageFault_Handler will be
//passed as arg to UsageFault_Handler_c (based on caller & callee rules)
void UsageFault_Handler_c(uint32_t* pBaseStackFrame)
{

	uint32_t* pUFSR = (uint32_t*) 0xE000ED2A; //usage fault status register
	printf("exception : Usagefault\n");
	printf("pUFSR = %lx\n" , (*pUFSR));
	printf("BaseStackFrame = %p\n" , pBaseStackFrame);
	printf("value of R0 = %lx\n" , pBaseStackFrame[0]);
	printf("value of R1 = %lx\n" , pBaseStackFrame[1]);
	printf("value of R2 = %lx\n" , pBaseStackFrame[2]);
	printf("value of R3 = %lx\n" , pBaseStackFrame[3]);
	printf("value of R12 = %lx\n" , pBaseStackFrame[4]);
	printf("value of LR = %lx\n" , pBaseStackFrame[5]);
	printf("value of PC = %lx\n" , pBaseStackFrame[6]);
	printf("value of XPSR = %lx\n" , pBaseStackFrame[7]);
	while(1);
}






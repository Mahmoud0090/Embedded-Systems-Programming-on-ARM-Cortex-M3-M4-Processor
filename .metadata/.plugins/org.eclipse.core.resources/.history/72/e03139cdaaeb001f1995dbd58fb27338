/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>

#define SRAM_START   0x20000000U
#define SRAM_SIZE   (128 * 1024)
#define SRAM_END   ((SRAM_START) + (SRAM_SIZE))

#define STACK_START   SRAM_END

#define STACK_MSP_START   STACK_START
#define STACK_MSP_END   (STACK_MSP_START + 512)
#define STACK_PSP_START   STACK_MSP_END


int func_add(int a , int b , int c , int d)
{
	return a+b+c+d;
}

__attribute__((naked)) void change_sp_to_psp(void)
{
    __asm volatile (
        "LDR R0, =0x2001FF80\n"  // Load PSP address (SRAM_END - 512, 8-byte aligned)
        "MSR PSP, R0\n"          // Set PSP
        "MOV R0, #0x02\n"        // Set CONTROL register to use PSP
        "MSR CONTROL, R0\n"
        "ISB\n"                  // Instruction Synchronization Barrier
        "BX LR\n"
    );
}

void print_SP_register_values(void)
{
	uint32_t msp, psp, current_sp, control;

	// Read MSP (Main Stack Pointer)
	__asm volatile ("MRS %0, MSP" : "=r"(msp));

	// Read PSP (Process Stack Pointer)
	__asm volatile ("MRS %0, PSP" : "=r"(psp));

	// Read the current SP (Stack Pointer)
	__asm volatile ("MOV %0, SP" : "=r"(current_sp));

	// Read CONTROL register to check which SP is in use
	__asm volatile ("MRS %0, CONTROL" : "=r"(control));

	// Print the values
	printf("MSP = 0x%08X, PSP = 0x%08X, SP = 0x%08X, CONTROL = 0x%08X\n",
			msp, psp, current_sp, control);
}

void generate_execption(void)
{
	__asm volatile("SVC #0X2");
}

int main(void)
{

	print_SP_register_values();

	change_sp_to_psp();

	print_SP_register_values();


    int ret;

    ret = func_add(1 , 4 , 5 , 6);

    printf("result = %d\n" , ret);

    generate_execption();

    print_SP_register_values();

	for(;;);
}

/*void SVC_Handler(void)
{
	printf("in SVC handler\n");
}*/

void SVC_Handler_C(uint32_t *stack)
{
    printf("in SVC handler\n");
    print_SP_register_values();
    // Extract the return address from the stack frame
    uint32_t return_address = stack[6];
    printf("Return address = 0x%08X\n", return_address);
}


task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000178  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800033c  08000344  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800033c  0800033c  00001344  2**0
                  CONTENTS
  4 .ARM          00000000  0800033c  0800033c  00001344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800033c  08000344  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800033c  0800033c  0000133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000340  08000340  00001340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000344  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000344  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000185  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000f5  00000000  00000000  000014f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000015e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000050  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b4b  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000690  00000000  00000000  000031fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000077a7  00000000  00000000  0000388b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000b032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000110  00000000  00000000  0000b078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000324 	.word	0x08000324

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000324 	.word	0x08000324

08000204 <main>:

#define HSI_CLK				16000000U
#define SYSTICK_TIM_CLK     HSI_CLK

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    init_systick_timer(TICK_HZ);
 8000208:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800020c:	f000 f802 	bl	8000214 <init_systick_timer>
	for(;;);
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <main+0xc>

08000214 <init_systick_timer>:
	}

}

void init_systick_timer(uint32_t tick_hz)
{
 8000214:	b480      	push	{r7}
 8000216:	b087      	sub	sp, #28
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t *)0xE000E014; // SysTick Reload Value Register
 800021c:	4b14      	ldr	r3, [pc, #80]	@ (8000270 <init_systick_timer+0x5c>)
 800021e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t *)0xE000E010; //SysTick Control and Status Register
 8000220:	4b14      	ldr	r3, [pc, #80]	@ (8000274 <init_systick_timer+0x60>)
 8000222:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1;
 8000224:	4a14      	ldr	r2, [pc, #80]	@ (8000278 <init_systick_timer+0x64>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	fbb2 f3f3 	udiv	r3, r2, r3
 800022c:	3b01      	subs	r3, #1
 800022e:	60fb      	str	r3, [r7, #12]

	//clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]


	//load the value to SVR
	*pSRVR |= count_value;
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	431a      	orrs	r2, r3
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	601a      	str	r2, [r3, #0]

	//do some setting
	*pSCSR |= (1 << 1); //  Enables SysTick exception request
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 0202 	orr.w	r2, r3, #2
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //  Indicates the clock source, processor clock source
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 0204 	orr.w	r2, r3, #4
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	601a      	str	r2, [r3, #0]

	//enable the systick
	*pSCSR |= (1 << 0); // enable the counter
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f043 0201 	orr.w	r2, r3, #1
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	371c      	adds	r7, #28
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	e000e014 	.word	0xe000e014
 8000274:	e000e010 	.word	0xe000e010
 8000278:	00f42400 	.word	0x00f42400

0800027c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0


}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	@ (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	@ (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	@ (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	@ (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	@ (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	@ (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 f811 	bl	80002dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ffa3 	bl	8000204 <main>

080002be <LoopForever>:

LoopForever:
  b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08000344 	.word	0x08000344
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	2000001c 	.word	0x2000001c

080002d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC_IRQHandler>
	...

080002dc <__libc_init_array>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	4d0d      	ldr	r5, [pc, #52]	@ (8000314 <__libc_init_array+0x38>)
 80002e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000318 <__libc_init_array+0x3c>)
 80002e2:	1b64      	subs	r4, r4, r5
 80002e4:	10a4      	asrs	r4, r4, #2
 80002e6:	2600      	movs	r6, #0
 80002e8:	42a6      	cmp	r6, r4
 80002ea:	d109      	bne.n	8000300 <__libc_init_array+0x24>
 80002ec:	4d0b      	ldr	r5, [pc, #44]	@ (800031c <__libc_init_array+0x40>)
 80002ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000320 <__libc_init_array+0x44>)
 80002f0:	f000 f818 	bl	8000324 <_init>
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	10a4      	asrs	r4, r4, #2
 80002f8:	2600      	movs	r6, #0
 80002fa:	42a6      	cmp	r6, r4
 80002fc:	d105      	bne.n	800030a <__libc_init_array+0x2e>
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f855 3b04 	ldr.w	r3, [r5], #4
 8000304:	4798      	blx	r3
 8000306:	3601      	adds	r6, #1
 8000308:	e7ee      	b.n	80002e8 <__libc_init_array+0xc>
 800030a:	f855 3b04 	ldr.w	r3, [r5], #4
 800030e:	4798      	blx	r3
 8000310:	3601      	adds	r6, #1
 8000312:	e7f2      	b.n	80002fa <__libc_init_array+0x1e>
 8000314:	0800033c 	.word	0x0800033c
 8000318:	0800033c 	.word	0x0800033c
 800031c:	0800033c 	.word	0x0800033c
 8000320:	08000340 	.word	0x08000340

08000324 <_init>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr

08000330 <_fini>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

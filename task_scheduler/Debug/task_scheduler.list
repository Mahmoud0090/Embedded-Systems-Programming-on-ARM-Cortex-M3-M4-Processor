
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d20  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000ee4  08000ee4  00001ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f24  08000f24  0000206c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f24  08000f24  0000206c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f24  08000f24  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f24  08000f24  00001f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f28  08000f28  00001f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08000f2c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000006c  08000f98  0000206c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08000f98  000021e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a5f  00000000  00000000  00002096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003a6  00000000  00000000  00002af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00002ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ef  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2b  00000000  00000000  000030e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015a2  00000000  00000000  00005e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000099e8  00000000  00000000  000073b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010d9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac0  00000000  00000000  00010de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000118a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ecc 	.word	0x08000ecc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000070 	.word	0x20000070
 8000200:	08000ecc 	.word	0x08000ecc

08000204 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START,T2_STACK_START,T3_STACK_START,T4_STACK_START};

uint32_t task_handlers[MAX_TASKS];

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	init_scheduler_stack(SCHED_STACK_START);
 8000208:	480b      	ldr	r0, [pc, #44]	@ (8000238 <main+0x34>)
 800020a:	f000 f875 	bl	80002f8 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 800020e:	4a0b      	ldr	r2, [pc, #44]	@ (800023c <main+0x38>)
 8000210:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <main+0x3c>)
 8000212:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000214:	4a0b      	ldr	r2, [pc, #44]	@ (8000244 <main+0x40>)
 8000216:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <main+0x3c>)
 8000218:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 800021a:	4a0b      	ldr	r2, [pc, #44]	@ (8000248 <main+0x44>)
 800021c:	4b08      	ldr	r3, [pc, #32]	@ (8000240 <main+0x3c>)
 800021e:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000220:	4a0a      	ldr	r2, [pc, #40]	@ (800024c <main+0x48>)
 8000222:	4b07      	ldr	r3, [pc, #28]	@ (8000240 <main+0x3c>)
 8000224:	60da      	str	r2, [r3, #12]

	init_task_stack();
 8000226:	f000 f86d 	bl	8000304 <init_task_stack>

    init_systick_timer(TICK_HZ);
 800022a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022e:	f000 f82f 	bl	8000290 <init_systick_timer>
	for(;;);
 8000232:	bf00      	nop
 8000234:	e7fd      	b.n	8000232 <main+0x2e>
 8000236:	bf00      	nop
 8000238:	1ffa0000 	.word	0x1ffa0000
 800023c:	08000251 	.word	0x08000251
 8000240:	20000088 	.word	0x20000088
 8000244:	08000261 	.word	0x08000261
 8000248:	08000271 	.word	0x08000271
 800024c:	08000281 	.word	0x08000281

08000250 <task1_handler>:
}

void task1_handler(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is task1\n");
 8000254:	4801      	ldr	r0, [pc, #4]	@ (800025c <task1_handler+0xc>)
 8000256:	f000 faa9 	bl	80007ac <puts>
 800025a:	e7fb      	b.n	8000254 <task1_handler+0x4>
 800025c:	08000ee4 	.word	0x08000ee4

08000260 <task2_handler>:
	}
}
void task2_handler(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is task2\n");
 8000264:	4801      	ldr	r0, [pc, #4]	@ (800026c <task2_handler+0xc>)
 8000266:	f000 faa1 	bl	80007ac <puts>
 800026a:	e7fb      	b.n	8000264 <task2_handler+0x4>
 800026c:	08000ef4 	.word	0x08000ef4

08000270 <task3_handler>:
	}

}
void task3_handler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is task3\n");
 8000274:	4801      	ldr	r0, [pc, #4]	@ (800027c <task3_handler+0xc>)
 8000276:	f000 fa99 	bl	80007ac <puts>
 800027a:	e7fb      	b.n	8000274 <task3_handler+0x4>
 800027c:	08000f04 	.word	0x08000f04

08000280 <task4_handler>:
	}

}
void task4_handler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is task4\n");
 8000284:	4801      	ldr	r0, [pc, #4]	@ (800028c <task4_handler+0xc>)
 8000286:	f000 fa91 	bl	80007ac <puts>
 800028a:	e7fb      	b.n	8000284 <task4_handler+0x4>
 800028c:	08000f14 	.word	0x08000f14

08000290 <init_systick_timer>:
	}

}

void init_systick_timer(uint32_t tick_hz)
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t *)0xE000E014; // SysTick Reload Value Register
 8000298:	4b14      	ldr	r3, [pc, #80]	@ (80002ec <init_systick_timer+0x5c>)
 800029a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t *)0xE000E010; //SysTick Control and Status Register
 800029c:	4b14      	ldr	r3, [pc, #80]	@ (80002f0 <init_systick_timer+0x60>)
 800029e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1;
 80002a0:	4a14      	ldr	r2, [pc, #80]	@ (80002f4 <init_systick_timer+0x64>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]

	//clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]


	//load the value to SVR
	*pSRVR |= count_value;
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	431a      	orrs	r2, r3
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	601a      	str	r2, [r3, #0]

	//do some setting
	*pSCSR |= (1 << 1); //  Enables SysTick exception request
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 0202 	orr.w	r2, r3, #2
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //  Indicates the clock source, processor clock source
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0204 	orr.w	r2, r3, #4
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	601a      	str	r2, [r3, #0]

	//enable the systick
	*pSCSR |= (1 << 0); // enable the counter
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 0201 	orr.w	r2, r3, #1
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	601a      	str	r2, [r3, #0]
}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e014 	.word	0xe000e014
 80002f0:	e000e010 	.word	0xe000e010
 80002f4:	00f42400 	.word	0x00f42400

080002f8 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80002f8:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP, %0" : : "r" (sched_top_of_stack) : );
 80002fa:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 80002fe:	4770      	bx	lr
}
 8000300:	bf00      	nop
	...

08000304 <init_task_stack>:


void init_task_stack(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
	uint32_t* pPSP;

	for(int i = 0; i<MAX_TASKS ; i++)
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	e032      	b.n	8000376 <init_task_stack+0x72>
	{
		pPSP = (uint32_t *)psp_of_tasks[i];
 8000310:	4a1d      	ldr	r2, [pc, #116]	@ (8000388 <init_task_stack+0x84>)
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000318:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	3b04      	subs	r3, #4
 800031e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000326:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3b04      	subs	r3, #4
 800032c:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800032e:	4a17      	ldr	r2, [pc, #92]	@ (800038c <init_task_stack+0x88>)
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	601a      	str	r2, [r3, #0]

		pPSP--;//LR
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3b04      	subs	r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f06f 0202 	mvn.w	r2, #2
 8000346:	601a      	str	r2, [r3, #0]

		//R0 to R12

		for(int j = 0 ;i<13; j++)
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	e008      	b.n	8000360 <init_task_stack+0x5c>
		{
			pPSP--;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3b04      	subs	r3, #4
 8000352:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
		for(int j = 0 ;i<13; j++)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3301      	adds	r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	2b0c      	cmp	r3, #12
 8000364:	ddf3      	ble.n	800034e <init_task_stack+0x4a>
		}

		//storing the value of psp
		psp_of_tasks[i] = (uint32_t)pPSP;
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4907      	ldr	r1, [pc, #28]	@ (8000388 <init_task_stack+0x84>)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i<MAX_TASKS ; i++)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	3301      	adds	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	2b03      	cmp	r3, #3
 800037a:	ddc9      	ble.n	8000310 <init_task_stack+0xc>
	}

}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	20000000 	.word	0x20000000
 800038c:	20000088 	.word	0x20000088

08000390 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0


}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <ITM_SendChar+0x44>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <ITM_SendChar+0x44>)
 80003ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003b2:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <ITM_SendChar+0x48>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a0b      	ldr	r2, [pc, #44]	@ (80003e4 <ITM_SendChar+0x48>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003be:	bf00      	nop
 80003c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f8      	beq.n	80003c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003ce:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	6013      	str	r3, [r2, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	e000edfc 	.word	0xe000edfc
 80003e4:	e0000e00 	.word	0xe0000e00

080003e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	e00a      	b.n	8000410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003fa:	f3af 8000 	nop.w
 80003fe:	4601      	mov	r1, r0
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	1c5a      	adds	r2, r3, #1
 8000404:	60ba      	str	r2, [r7, #8]
 8000406:	b2ca      	uxtb	r2, r1
 8000408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	3301      	adds	r3, #1
 800040e:	617b      	str	r3, [r7, #20]
 8000410:	697a      	ldr	r2, [r7, #20]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	429a      	cmp	r2, r3
 8000416:	dbf0      	blt.n	80003fa <_read+0x12>
  }

  return len;
 8000418:	687b      	ldr	r3, [r7, #4]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	e009      	b.n	8000448 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	1c5a      	adds	r2, r3, #1
 8000438:	60ba      	str	r2, [r7, #8]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ffad 	bl	800039c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	3301      	adds	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	697a      	ldr	r2, [r7, #20]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	429a      	cmp	r2, r3
 800044e:	dbf1      	blt.n	8000434 <_write+0x12>
  }
  return len;
 8000450:	687b      	ldr	r3, [r7, #4]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <_close>:

int _close(int file)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000480:	605a      	str	r2, [r3, #4]
  return 0;
 8000482:	2300      	movs	r3, #0
}
 8000484:	4618      	mov	r0, r3
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <_isatty>:

int _isatty(int file)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000496:	2301      	movs	r3, #1
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
	...

080004bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c4:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <_sbrk+0x5c>)
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <_sbrk+0x60>)
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d0:	4b13      	ldr	r3, [pc, #76]	@ (8000520 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <_sbrk+0x64>)
 80004da:	4a12      	ldr	r2, [pc, #72]	@ (8000524 <_sbrk+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004de:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ec:	f000 fa8c 	bl	8000a08 <__errno>
 80004f0:	4603      	mov	r3, r0
 80004f2:	220c      	movs	r2, #12
 80004f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	e009      	b.n	8000510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	4a05      	ldr	r2, [pc, #20]	@ (8000520 <_sbrk+0x64>)
 800050c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20020000 	.word	0x20020000
 800051c:	00000400 	.word	0x00000400
 8000520:	20000098 	.word	0x20000098
 8000524:	200001e8 	.word	0x200001e8

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	@ (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	@ (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	@ (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	@ (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 fa5d 	bl	8000a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fe53 	bl	8000204 <main>

0800055e <LoopForever>:

LoopForever:
  b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800056c:	08000f2c 	.word	0x08000f2c
  ldr r2, =_sbss
 8000570:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000574:	200001e8 	.word	0x200001e8

08000578 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC_IRQHandler>
	...

0800057c <std>:
 800057c:	2300      	movs	r3, #0
 800057e:	b510      	push	{r4, lr}
 8000580:	4604      	mov	r4, r0
 8000582:	e9c0 3300 	strd	r3, r3, [r0]
 8000586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800058a:	6083      	str	r3, [r0, #8]
 800058c:	8181      	strh	r1, [r0, #12]
 800058e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000590:	81c2      	strh	r2, [r0, #14]
 8000592:	6183      	str	r3, [r0, #24]
 8000594:	4619      	mov	r1, r3
 8000596:	2208      	movs	r2, #8
 8000598:	305c      	adds	r0, #92	@ 0x5c
 800059a:	f000 f9e7 	bl	800096c <memset>
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <std+0x58>)
 80005a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <std+0x5c>)
 80005a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <std+0x60>)
 80005a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <std+0x64>)
 80005ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80005ae:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <std+0x68>)
 80005b0:	6224      	str	r4, [r4, #32]
 80005b2:	429c      	cmp	r4, r3
 80005b4:	d006      	beq.n	80005c4 <std+0x48>
 80005b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005ba:	4294      	cmp	r4, r2
 80005bc:	d002      	beq.n	80005c4 <std+0x48>
 80005be:	33d0      	adds	r3, #208	@ 0xd0
 80005c0:	429c      	cmp	r4, r3
 80005c2:	d105      	bne.n	80005d0 <std+0x54>
 80005c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005cc:	f000 ba46 	b.w	8000a5c <__retarget_lock_init_recursive>
 80005d0:	bd10      	pop	{r4, pc}
 80005d2:	bf00      	nop
 80005d4:	080007bd 	.word	0x080007bd
 80005d8:	080007df 	.word	0x080007df
 80005dc:	08000817 	.word	0x08000817
 80005e0:	0800083b 	.word	0x0800083b
 80005e4:	2000009c 	.word	0x2000009c

080005e8 <stdio_exit_handler>:
 80005e8:	4a02      	ldr	r2, [pc, #8]	@ (80005f4 <stdio_exit_handler+0xc>)
 80005ea:	4903      	ldr	r1, [pc, #12]	@ (80005f8 <stdio_exit_handler+0x10>)
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <stdio_exit_handler+0x14>)
 80005ee:	f000 b869 	b.w	80006c4 <_fwalk_sglue>
 80005f2:	bf00      	nop
 80005f4:	20000010 	.word	0x20000010
 80005f8:	08000d55 	.word	0x08000d55
 80005fc:	20000020 	.word	0x20000020

08000600 <cleanup_stdio>:
 8000600:	6841      	ldr	r1, [r0, #4]
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <cleanup_stdio+0x34>)
 8000604:	4299      	cmp	r1, r3
 8000606:	b510      	push	{r4, lr}
 8000608:	4604      	mov	r4, r0
 800060a:	d001      	beq.n	8000610 <cleanup_stdio+0x10>
 800060c:	f000 fba2 	bl	8000d54 <_fflush_r>
 8000610:	68a1      	ldr	r1, [r4, #8]
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <cleanup_stdio+0x38>)
 8000614:	4299      	cmp	r1, r3
 8000616:	d002      	beq.n	800061e <cleanup_stdio+0x1e>
 8000618:	4620      	mov	r0, r4
 800061a:	f000 fb9b 	bl	8000d54 <_fflush_r>
 800061e:	68e1      	ldr	r1, [r4, #12]
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <cleanup_stdio+0x3c>)
 8000622:	4299      	cmp	r1, r3
 8000624:	d004      	beq.n	8000630 <cleanup_stdio+0x30>
 8000626:	4620      	mov	r0, r4
 8000628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800062c:	f000 bb92 	b.w	8000d54 <_fflush_r>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	2000009c 	.word	0x2000009c
 8000638:	20000104 	.word	0x20000104
 800063c:	2000016c 	.word	0x2000016c

08000640 <global_stdio_init.part.0>:
 8000640:	b510      	push	{r4, lr}
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <global_stdio_init.part.0+0x30>)
 8000644:	4c0b      	ldr	r4, [pc, #44]	@ (8000674 <global_stdio_init.part.0+0x34>)
 8000646:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <global_stdio_init.part.0+0x38>)
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	4620      	mov	r0, r4
 800064c:	2200      	movs	r2, #0
 800064e:	2104      	movs	r1, #4
 8000650:	f7ff ff94 	bl	800057c <std>
 8000654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000658:	2201      	movs	r2, #1
 800065a:	2109      	movs	r1, #9
 800065c:	f7ff ff8e 	bl	800057c <std>
 8000660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000664:	2202      	movs	r2, #2
 8000666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800066a:	2112      	movs	r1, #18
 800066c:	f7ff bf86 	b.w	800057c <std>
 8000670:	200001d4 	.word	0x200001d4
 8000674:	2000009c 	.word	0x2000009c
 8000678:	080005e9 	.word	0x080005e9

0800067c <__sfp_lock_acquire>:
 800067c:	4801      	ldr	r0, [pc, #4]	@ (8000684 <__sfp_lock_acquire+0x8>)
 800067e:	f000 b9ee 	b.w	8000a5e <__retarget_lock_acquire_recursive>
 8000682:	bf00      	nop
 8000684:	200001dd 	.word	0x200001dd

08000688 <__sfp_lock_release>:
 8000688:	4801      	ldr	r0, [pc, #4]	@ (8000690 <__sfp_lock_release+0x8>)
 800068a:	f000 b9e9 	b.w	8000a60 <__retarget_lock_release_recursive>
 800068e:	bf00      	nop
 8000690:	200001dd 	.word	0x200001dd

08000694 <__sinit>:
 8000694:	b510      	push	{r4, lr}
 8000696:	4604      	mov	r4, r0
 8000698:	f7ff fff0 	bl	800067c <__sfp_lock_acquire>
 800069c:	6a23      	ldr	r3, [r4, #32]
 800069e:	b11b      	cbz	r3, 80006a8 <__sinit+0x14>
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a4:	f7ff bff0 	b.w	8000688 <__sfp_lock_release>
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <__sinit+0x28>)
 80006aa:	6223      	str	r3, [r4, #32]
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <__sinit+0x2c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f5      	bne.n	80006a0 <__sinit+0xc>
 80006b4:	f7ff ffc4 	bl	8000640 <global_stdio_init.part.0>
 80006b8:	e7f2      	b.n	80006a0 <__sinit+0xc>
 80006ba:	bf00      	nop
 80006bc:	08000601 	.word	0x08000601
 80006c0:	200001d4 	.word	0x200001d4

080006c4 <_fwalk_sglue>:
 80006c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006c8:	4607      	mov	r7, r0
 80006ca:	4688      	mov	r8, r1
 80006cc:	4614      	mov	r4, r2
 80006ce:	2600      	movs	r6, #0
 80006d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006d4:	f1b9 0901 	subs.w	r9, r9, #1
 80006d8:	d505      	bpl.n	80006e6 <_fwalk_sglue+0x22>
 80006da:	6824      	ldr	r4, [r4, #0]
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d1f7      	bne.n	80006d0 <_fwalk_sglue+0xc>
 80006e0:	4630      	mov	r0, r6
 80006e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006e6:	89ab      	ldrh	r3, [r5, #12]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d907      	bls.n	80006fc <_fwalk_sglue+0x38>
 80006ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006f0:	3301      	adds	r3, #1
 80006f2:	d003      	beq.n	80006fc <_fwalk_sglue+0x38>
 80006f4:	4629      	mov	r1, r5
 80006f6:	4638      	mov	r0, r7
 80006f8:	47c0      	blx	r8
 80006fa:	4306      	orrs	r6, r0
 80006fc:	3568      	adds	r5, #104	@ 0x68
 80006fe:	e7e9      	b.n	80006d4 <_fwalk_sglue+0x10>

08000700 <_puts_r>:
 8000700:	6a03      	ldr	r3, [r0, #32]
 8000702:	b570      	push	{r4, r5, r6, lr}
 8000704:	6884      	ldr	r4, [r0, #8]
 8000706:	4605      	mov	r5, r0
 8000708:	460e      	mov	r6, r1
 800070a:	b90b      	cbnz	r3, 8000710 <_puts_r+0x10>
 800070c:	f7ff ffc2 	bl	8000694 <__sinit>
 8000710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000712:	07db      	lsls	r3, r3, #31
 8000714:	d405      	bmi.n	8000722 <_puts_r+0x22>
 8000716:	89a3      	ldrh	r3, [r4, #12]
 8000718:	0598      	lsls	r0, r3, #22
 800071a:	d402      	bmi.n	8000722 <_puts_r+0x22>
 800071c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800071e:	f000 f99e 	bl	8000a5e <__retarget_lock_acquire_recursive>
 8000722:	89a3      	ldrh	r3, [r4, #12]
 8000724:	0719      	lsls	r1, r3, #28
 8000726:	d502      	bpl.n	800072e <_puts_r+0x2e>
 8000728:	6923      	ldr	r3, [r4, #16]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d135      	bne.n	800079a <_puts_r+0x9a>
 800072e:	4621      	mov	r1, r4
 8000730:	4628      	mov	r0, r5
 8000732:	f000 f8c5 	bl	80008c0 <__swsetup_r>
 8000736:	b380      	cbz	r0, 800079a <_puts_r+0x9a>
 8000738:	f04f 35ff 	mov.w	r5, #4294967295
 800073c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800073e:	07da      	lsls	r2, r3, #31
 8000740:	d405      	bmi.n	800074e <_puts_r+0x4e>
 8000742:	89a3      	ldrh	r3, [r4, #12]
 8000744:	059b      	lsls	r3, r3, #22
 8000746:	d402      	bmi.n	800074e <_puts_r+0x4e>
 8000748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800074a:	f000 f989 	bl	8000a60 <__retarget_lock_release_recursive>
 800074e:	4628      	mov	r0, r5
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	2b00      	cmp	r3, #0
 8000754:	da04      	bge.n	8000760 <_puts_r+0x60>
 8000756:	69a2      	ldr	r2, [r4, #24]
 8000758:	429a      	cmp	r2, r3
 800075a:	dc17      	bgt.n	800078c <_puts_r+0x8c>
 800075c:	290a      	cmp	r1, #10
 800075e:	d015      	beq.n	800078c <_puts_r+0x8c>
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	6022      	str	r2, [r4, #0]
 8000766:	7019      	strb	r1, [r3, #0]
 8000768:	68a3      	ldr	r3, [r4, #8]
 800076a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800076e:	3b01      	subs	r3, #1
 8000770:	60a3      	str	r3, [r4, #8]
 8000772:	2900      	cmp	r1, #0
 8000774:	d1ed      	bne.n	8000752 <_puts_r+0x52>
 8000776:	2b00      	cmp	r3, #0
 8000778:	da11      	bge.n	800079e <_puts_r+0x9e>
 800077a:	4622      	mov	r2, r4
 800077c:	210a      	movs	r1, #10
 800077e:	4628      	mov	r0, r5
 8000780:	f000 f85f 	bl	8000842 <__swbuf_r>
 8000784:	3001      	adds	r0, #1
 8000786:	d0d7      	beq.n	8000738 <_puts_r+0x38>
 8000788:	250a      	movs	r5, #10
 800078a:	e7d7      	b.n	800073c <_puts_r+0x3c>
 800078c:	4622      	mov	r2, r4
 800078e:	4628      	mov	r0, r5
 8000790:	f000 f857 	bl	8000842 <__swbuf_r>
 8000794:	3001      	adds	r0, #1
 8000796:	d1e7      	bne.n	8000768 <_puts_r+0x68>
 8000798:	e7ce      	b.n	8000738 <_puts_r+0x38>
 800079a:	3e01      	subs	r6, #1
 800079c:	e7e4      	b.n	8000768 <_puts_r+0x68>
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	6022      	str	r2, [r4, #0]
 80007a4:	220a      	movs	r2, #10
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e7ee      	b.n	8000788 <_puts_r+0x88>
	...

080007ac <puts>:
 80007ac:	4b02      	ldr	r3, [pc, #8]	@ (80007b8 <puts+0xc>)
 80007ae:	4601      	mov	r1, r0
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f7ff bfa5 	b.w	8000700 <_puts_r>
 80007b6:	bf00      	nop
 80007b8:	2000001c 	.word	0x2000001c

080007bc <__sread>:
 80007bc:	b510      	push	{r4, lr}
 80007be:	460c      	mov	r4, r1
 80007c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007c4:	f000 f8fc 	bl	80009c0 <_read_r>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	bfab      	itete	ge
 80007cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80007ce:	89a3      	ldrhlt	r3, [r4, #12]
 80007d0:	181b      	addge	r3, r3, r0
 80007d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80007d6:	bfac      	ite	ge
 80007d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80007da:	81a3      	strhlt	r3, [r4, #12]
 80007dc:	bd10      	pop	{r4, pc}

080007de <__swrite>:
 80007de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e2:	461f      	mov	r7, r3
 80007e4:	898b      	ldrh	r3, [r1, #12]
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	4605      	mov	r5, r0
 80007ea:	460c      	mov	r4, r1
 80007ec:	4616      	mov	r6, r2
 80007ee:	d505      	bpl.n	80007fc <__swrite+0x1e>
 80007f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007f4:	2302      	movs	r3, #2
 80007f6:	2200      	movs	r2, #0
 80007f8:	f000 f8d0 	bl	800099c <_lseek_r>
 80007fc:	89a3      	ldrh	r3, [r4, #12]
 80007fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000806:	81a3      	strh	r3, [r4, #12]
 8000808:	4632      	mov	r2, r6
 800080a:	463b      	mov	r3, r7
 800080c:	4628      	mov	r0, r5
 800080e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000812:	f000 b8e7 	b.w	80009e4 <_write_r>

08000816 <__sseek>:
 8000816:	b510      	push	{r4, lr}
 8000818:	460c      	mov	r4, r1
 800081a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800081e:	f000 f8bd 	bl	800099c <_lseek_r>
 8000822:	1c43      	adds	r3, r0, #1
 8000824:	89a3      	ldrh	r3, [r4, #12]
 8000826:	bf15      	itete	ne
 8000828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800082a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800082e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000832:	81a3      	strheq	r3, [r4, #12]
 8000834:	bf18      	it	ne
 8000836:	81a3      	strhne	r3, [r4, #12]
 8000838:	bd10      	pop	{r4, pc}

0800083a <__sclose>:
 800083a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800083e:	f000 b89d 	b.w	800097c <_close_r>

08000842 <__swbuf_r>:
 8000842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000844:	460e      	mov	r6, r1
 8000846:	4614      	mov	r4, r2
 8000848:	4605      	mov	r5, r0
 800084a:	b118      	cbz	r0, 8000854 <__swbuf_r+0x12>
 800084c:	6a03      	ldr	r3, [r0, #32]
 800084e:	b90b      	cbnz	r3, 8000854 <__swbuf_r+0x12>
 8000850:	f7ff ff20 	bl	8000694 <__sinit>
 8000854:	69a3      	ldr	r3, [r4, #24]
 8000856:	60a3      	str	r3, [r4, #8]
 8000858:	89a3      	ldrh	r3, [r4, #12]
 800085a:	071a      	lsls	r2, r3, #28
 800085c:	d501      	bpl.n	8000862 <__swbuf_r+0x20>
 800085e:	6923      	ldr	r3, [r4, #16]
 8000860:	b943      	cbnz	r3, 8000874 <__swbuf_r+0x32>
 8000862:	4621      	mov	r1, r4
 8000864:	4628      	mov	r0, r5
 8000866:	f000 f82b 	bl	80008c0 <__swsetup_r>
 800086a:	b118      	cbz	r0, 8000874 <__swbuf_r+0x32>
 800086c:	f04f 37ff 	mov.w	r7, #4294967295
 8000870:	4638      	mov	r0, r7
 8000872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	6922      	ldr	r2, [r4, #16]
 8000878:	1a98      	subs	r0, r3, r2
 800087a:	6963      	ldr	r3, [r4, #20]
 800087c:	b2f6      	uxtb	r6, r6
 800087e:	4283      	cmp	r3, r0
 8000880:	4637      	mov	r7, r6
 8000882:	dc05      	bgt.n	8000890 <__swbuf_r+0x4e>
 8000884:	4621      	mov	r1, r4
 8000886:	4628      	mov	r0, r5
 8000888:	f000 fa64 	bl	8000d54 <_fflush_r>
 800088c:	2800      	cmp	r0, #0
 800088e:	d1ed      	bne.n	800086c <__swbuf_r+0x2a>
 8000890:	68a3      	ldr	r3, [r4, #8]
 8000892:	3b01      	subs	r3, #1
 8000894:	60a3      	str	r3, [r4, #8]
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	6022      	str	r2, [r4, #0]
 800089c:	701e      	strb	r6, [r3, #0]
 800089e:	6962      	ldr	r2, [r4, #20]
 80008a0:	1c43      	adds	r3, r0, #1
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d004      	beq.n	80008b0 <__swbuf_r+0x6e>
 80008a6:	89a3      	ldrh	r3, [r4, #12]
 80008a8:	07db      	lsls	r3, r3, #31
 80008aa:	d5e1      	bpl.n	8000870 <__swbuf_r+0x2e>
 80008ac:	2e0a      	cmp	r6, #10
 80008ae:	d1df      	bne.n	8000870 <__swbuf_r+0x2e>
 80008b0:	4621      	mov	r1, r4
 80008b2:	4628      	mov	r0, r5
 80008b4:	f000 fa4e 	bl	8000d54 <_fflush_r>
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d0d9      	beq.n	8000870 <__swbuf_r+0x2e>
 80008bc:	e7d6      	b.n	800086c <__swbuf_r+0x2a>
	...

080008c0 <__swsetup_r>:
 80008c0:	b538      	push	{r3, r4, r5, lr}
 80008c2:	4b29      	ldr	r3, [pc, #164]	@ (8000968 <__swsetup_r+0xa8>)
 80008c4:	4605      	mov	r5, r0
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	460c      	mov	r4, r1
 80008ca:	b118      	cbz	r0, 80008d4 <__swsetup_r+0x14>
 80008cc:	6a03      	ldr	r3, [r0, #32]
 80008ce:	b90b      	cbnz	r3, 80008d4 <__swsetup_r+0x14>
 80008d0:	f7ff fee0 	bl	8000694 <__sinit>
 80008d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008d8:	0719      	lsls	r1, r3, #28
 80008da:	d422      	bmi.n	8000922 <__swsetup_r+0x62>
 80008dc:	06da      	lsls	r2, r3, #27
 80008de:	d407      	bmi.n	80008f0 <__swsetup_r+0x30>
 80008e0:	2209      	movs	r2, #9
 80008e2:	602a      	str	r2, [r5, #0]
 80008e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e8:	81a3      	strh	r3, [r4, #12]
 80008ea:	f04f 30ff 	mov.w	r0, #4294967295
 80008ee:	e033      	b.n	8000958 <__swsetup_r+0x98>
 80008f0:	0758      	lsls	r0, r3, #29
 80008f2:	d512      	bpl.n	800091a <__swsetup_r+0x5a>
 80008f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80008f6:	b141      	cbz	r1, 800090a <__swsetup_r+0x4a>
 80008f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008fc:	4299      	cmp	r1, r3
 80008fe:	d002      	beq.n	8000906 <__swsetup_r+0x46>
 8000900:	4628      	mov	r0, r5
 8000902:	f000 f8af 	bl	8000a64 <_free_r>
 8000906:	2300      	movs	r3, #0
 8000908:	6363      	str	r3, [r4, #52]	@ 0x34
 800090a:	89a3      	ldrh	r3, [r4, #12]
 800090c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000910:	81a3      	strh	r3, [r4, #12]
 8000912:	2300      	movs	r3, #0
 8000914:	6063      	str	r3, [r4, #4]
 8000916:	6923      	ldr	r3, [r4, #16]
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	81a3      	strh	r3, [r4, #12]
 8000922:	6923      	ldr	r3, [r4, #16]
 8000924:	b94b      	cbnz	r3, 800093a <__swsetup_r+0x7a>
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800092c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000930:	d003      	beq.n	800093a <__swsetup_r+0x7a>
 8000932:	4621      	mov	r1, r4
 8000934:	4628      	mov	r0, r5
 8000936:	f000 fa5b 	bl	8000df0 <__smakebuf_r>
 800093a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800093e:	f013 0201 	ands.w	r2, r3, #1
 8000942:	d00a      	beq.n	800095a <__swsetup_r+0x9a>
 8000944:	2200      	movs	r2, #0
 8000946:	60a2      	str	r2, [r4, #8]
 8000948:	6962      	ldr	r2, [r4, #20]
 800094a:	4252      	negs	r2, r2
 800094c:	61a2      	str	r2, [r4, #24]
 800094e:	6922      	ldr	r2, [r4, #16]
 8000950:	b942      	cbnz	r2, 8000964 <__swsetup_r+0xa4>
 8000952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000956:	d1c5      	bne.n	80008e4 <__swsetup_r+0x24>
 8000958:	bd38      	pop	{r3, r4, r5, pc}
 800095a:	0799      	lsls	r1, r3, #30
 800095c:	bf58      	it	pl
 800095e:	6962      	ldrpl	r2, [r4, #20]
 8000960:	60a2      	str	r2, [r4, #8]
 8000962:	e7f4      	b.n	800094e <__swsetup_r+0x8e>
 8000964:	2000      	movs	r0, #0
 8000966:	e7f7      	b.n	8000958 <__swsetup_r+0x98>
 8000968:	2000001c 	.word	0x2000001c

0800096c <memset>:
 800096c:	4402      	add	r2, r0
 800096e:	4603      	mov	r3, r0
 8000970:	4293      	cmp	r3, r2
 8000972:	d100      	bne.n	8000976 <memset+0xa>
 8000974:	4770      	bx	lr
 8000976:	f803 1b01 	strb.w	r1, [r3], #1
 800097a:	e7f9      	b.n	8000970 <memset+0x4>

0800097c <_close_r>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4d06      	ldr	r5, [pc, #24]	@ (8000998 <_close_r+0x1c>)
 8000980:	2300      	movs	r3, #0
 8000982:	4604      	mov	r4, r0
 8000984:	4608      	mov	r0, r1
 8000986:	602b      	str	r3, [r5, #0]
 8000988:	f7ff fd67 	bl	800045a <_close>
 800098c:	1c43      	adds	r3, r0, #1
 800098e:	d102      	bne.n	8000996 <_close_r+0x1a>
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	b103      	cbz	r3, 8000996 <_close_r+0x1a>
 8000994:	6023      	str	r3, [r4, #0]
 8000996:	bd38      	pop	{r3, r4, r5, pc}
 8000998:	200001d8 	.word	0x200001d8

0800099c <_lseek_r>:
 800099c:	b538      	push	{r3, r4, r5, lr}
 800099e:	4d07      	ldr	r5, [pc, #28]	@ (80009bc <_lseek_r+0x20>)
 80009a0:	4604      	mov	r4, r0
 80009a2:	4608      	mov	r0, r1
 80009a4:	4611      	mov	r1, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	602a      	str	r2, [r5, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f7ff fd79 	bl	80004a2 <_lseek>
 80009b0:	1c43      	adds	r3, r0, #1
 80009b2:	d102      	bne.n	80009ba <_lseek_r+0x1e>
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	b103      	cbz	r3, 80009ba <_lseek_r+0x1e>
 80009b8:	6023      	str	r3, [r4, #0]
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
 80009bc:	200001d8 	.word	0x200001d8

080009c0 <_read_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4d07      	ldr	r5, [pc, #28]	@ (80009e0 <_read_r+0x20>)
 80009c4:	4604      	mov	r4, r0
 80009c6:	4608      	mov	r0, r1
 80009c8:	4611      	mov	r1, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	602a      	str	r2, [r5, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	f7ff fd0a 	bl	80003e8 <_read>
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	d102      	bne.n	80009de <_read_r+0x1e>
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	b103      	cbz	r3, 80009de <_read_r+0x1e>
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	bd38      	pop	{r3, r4, r5, pc}
 80009e0:	200001d8 	.word	0x200001d8

080009e4 <_write_r>:
 80009e4:	b538      	push	{r3, r4, r5, lr}
 80009e6:	4d07      	ldr	r5, [pc, #28]	@ (8000a04 <_write_r+0x20>)
 80009e8:	4604      	mov	r4, r0
 80009ea:	4608      	mov	r0, r1
 80009ec:	4611      	mov	r1, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	602a      	str	r2, [r5, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	f7ff fd15 	bl	8000422 <_write>
 80009f8:	1c43      	adds	r3, r0, #1
 80009fa:	d102      	bne.n	8000a02 <_write_r+0x1e>
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	b103      	cbz	r3, 8000a02 <_write_r+0x1e>
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	bd38      	pop	{r3, r4, r5, pc}
 8000a04:	200001d8 	.word	0x200001d8

08000a08 <__errno>:
 8000a08:	4b01      	ldr	r3, [pc, #4]	@ (8000a10 <__errno+0x8>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	2000001c 	.word	0x2000001c

08000a14 <__libc_init_array>:
 8000a14:	b570      	push	{r4, r5, r6, lr}
 8000a16:	4d0d      	ldr	r5, [pc, #52]	@ (8000a4c <__libc_init_array+0x38>)
 8000a18:	4c0d      	ldr	r4, [pc, #52]	@ (8000a50 <__libc_init_array+0x3c>)
 8000a1a:	1b64      	subs	r4, r4, r5
 8000a1c:	10a4      	asrs	r4, r4, #2
 8000a1e:	2600      	movs	r6, #0
 8000a20:	42a6      	cmp	r6, r4
 8000a22:	d109      	bne.n	8000a38 <__libc_init_array+0x24>
 8000a24:	4d0b      	ldr	r5, [pc, #44]	@ (8000a54 <__libc_init_array+0x40>)
 8000a26:	4c0c      	ldr	r4, [pc, #48]	@ (8000a58 <__libc_init_array+0x44>)
 8000a28:	f000 fa50 	bl	8000ecc <_init>
 8000a2c:	1b64      	subs	r4, r4, r5
 8000a2e:	10a4      	asrs	r4, r4, #2
 8000a30:	2600      	movs	r6, #0
 8000a32:	42a6      	cmp	r6, r4
 8000a34:	d105      	bne.n	8000a42 <__libc_init_array+0x2e>
 8000a36:	bd70      	pop	{r4, r5, r6, pc}
 8000a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3c:	4798      	blx	r3
 8000a3e:	3601      	adds	r6, #1
 8000a40:	e7ee      	b.n	8000a20 <__libc_init_array+0xc>
 8000a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a46:	4798      	blx	r3
 8000a48:	3601      	adds	r6, #1
 8000a4a:	e7f2      	b.n	8000a32 <__libc_init_array+0x1e>
 8000a4c:	08000f24 	.word	0x08000f24
 8000a50:	08000f24 	.word	0x08000f24
 8000a54:	08000f24 	.word	0x08000f24
 8000a58:	08000f28 	.word	0x08000f28

08000a5c <__retarget_lock_init_recursive>:
 8000a5c:	4770      	bx	lr

08000a5e <__retarget_lock_acquire_recursive>:
 8000a5e:	4770      	bx	lr

08000a60 <__retarget_lock_release_recursive>:
 8000a60:	4770      	bx	lr
	...

08000a64 <_free_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4605      	mov	r5, r0
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d041      	beq.n	8000af0 <_free_r+0x8c>
 8000a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a70:	1f0c      	subs	r4, r1, #4
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bfb8      	it	lt
 8000a76:	18e4      	addlt	r4, r4, r3
 8000a78:	f000 f8e0 	bl	8000c3c <__malloc_lock>
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <_free_r+0x90>)
 8000a7e:	6813      	ldr	r3, [r2, #0]
 8000a80:	b933      	cbnz	r3, 8000a90 <_free_r+0x2c>
 8000a82:	6063      	str	r3, [r4, #4]
 8000a84:	6014      	str	r4, [r2, #0]
 8000a86:	4628      	mov	r0, r5
 8000a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a8c:	f000 b8dc 	b.w	8000c48 <__malloc_unlock>
 8000a90:	42a3      	cmp	r3, r4
 8000a92:	d908      	bls.n	8000aa6 <_free_r+0x42>
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	1821      	adds	r1, r4, r0
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	bf01      	itttt	eq
 8000a9c:	6819      	ldreq	r1, [r3, #0]
 8000a9e:	685b      	ldreq	r3, [r3, #4]
 8000aa0:	1809      	addeq	r1, r1, r0
 8000aa2:	6021      	streq	r1, [r4, #0]
 8000aa4:	e7ed      	b.n	8000a82 <_free_r+0x1e>
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	b10b      	cbz	r3, 8000ab0 <_free_r+0x4c>
 8000aac:	42a3      	cmp	r3, r4
 8000aae:	d9fa      	bls.n	8000aa6 <_free_r+0x42>
 8000ab0:	6811      	ldr	r1, [r2, #0]
 8000ab2:	1850      	adds	r0, r2, r1
 8000ab4:	42a0      	cmp	r0, r4
 8000ab6:	d10b      	bne.n	8000ad0 <_free_r+0x6c>
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	4401      	add	r1, r0
 8000abc:	1850      	adds	r0, r2, r1
 8000abe:	4283      	cmp	r3, r0
 8000ac0:	6011      	str	r1, [r2, #0]
 8000ac2:	d1e0      	bne.n	8000a86 <_free_r+0x22>
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	6053      	str	r3, [r2, #4]
 8000aca:	4408      	add	r0, r1
 8000acc:	6010      	str	r0, [r2, #0]
 8000ace:	e7da      	b.n	8000a86 <_free_r+0x22>
 8000ad0:	d902      	bls.n	8000ad8 <_free_r+0x74>
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	602b      	str	r3, [r5, #0]
 8000ad6:	e7d6      	b.n	8000a86 <_free_r+0x22>
 8000ad8:	6820      	ldr	r0, [r4, #0]
 8000ada:	1821      	adds	r1, r4, r0
 8000adc:	428b      	cmp	r3, r1
 8000ade:	bf04      	itt	eq
 8000ae0:	6819      	ldreq	r1, [r3, #0]
 8000ae2:	685b      	ldreq	r3, [r3, #4]
 8000ae4:	6063      	str	r3, [r4, #4]
 8000ae6:	bf04      	itt	eq
 8000ae8:	1809      	addeq	r1, r1, r0
 8000aea:	6021      	streq	r1, [r4, #0]
 8000aec:	6054      	str	r4, [r2, #4]
 8000aee:	e7ca      	b.n	8000a86 <_free_r+0x22>
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop
 8000af4:	200001e4 	.word	0x200001e4

08000af8 <sbrk_aligned>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	4e0f      	ldr	r6, [pc, #60]	@ (8000b38 <sbrk_aligned+0x40>)
 8000afc:	460c      	mov	r4, r1
 8000afe:	6831      	ldr	r1, [r6, #0]
 8000b00:	4605      	mov	r5, r0
 8000b02:	b911      	cbnz	r1, 8000b0a <sbrk_aligned+0x12>
 8000b04:	f000 f9d2 	bl	8000eac <_sbrk_r>
 8000b08:	6030      	str	r0, [r6, #0]
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f000 f9cd 	bl	8000eac <_sbrk_r>
 8000b12:	1c43      	adds	r3, r0, #1
 8000b14:	d103      	bne.n	8000b1e <sbrk_aligned+0x26>
 8000b16:	f04f 34ff 	mov.w	r4, #4294967295
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
 8000b1e:	1cc4      	adds	r4, r0, #3
 8000b20:	f024 0403 	bic.w	r4, r4, #3
 8000b24:	42a0      	cmp	r0, r4
 8000b26:	d0f8      	beq.n	8000b1a <sbrk_aligned+0x22>
 8000b28:	1a21      	subs	r1, r4, r0
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f000 f9be 	bl	8000eac <_sbrk_r>
 8000b30:	3001      	adds	r0, #1
 8000b32:	d1f2      	bne.n	8000b1a <sbrk_aligned+0x22>
 8000b34:	e7ef      	b.n	8000b16 <sbrk_aligned+0x1e>
 8000b36:	bf00      	nop
 8000b38:	200001e0 	.word	0x200001e0

08000b3c <_malloc_r>:
 8000b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b40:	1ccd      	adds	r5, r1, #3
 8000b42:	f025 0503 	bic.w	r5, r5, #3
 8000b46:	3508      	adds	r5, #8
 8000b48:	2d0c      	cmp	r5, #12
 8000b4a:	bf38      	it	cc
 8000b4c:	250c      	movcc	r5, #12
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	4606      	mov	r6, r0
 8000b52:	db01      	blt.n	8000b58 <_malloc_r+0x1c>
 8000b54:	42a9      	cmp	r1, r5
 8000b56:	d904      	bls.n	8000b62 <_malloc_r+0x26>
 8000b58:	230c      	movs	r3, #12
 8000b5a:	6033      	str	r3, [r6, #0]
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c38 <_malloc_r+0xfc>
 8000b66:	f000 f869 	bl	8000c3c <__malloc_lock>
 8000b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b6e:	461c      	mov	r4, r3
 8000b70:	bb44      	cbnz	r4, 8000bc4 <_malloc_r+0x88>
 8000b72:	4629      	mov	r1, r5
 8000b74:	4630      	mov	r0, r6
 8000b76:	f7ff ffbf 	bl	8000af8 <sbrk_aligned>
 8000b7a:	1c43      	adds	r3, r0, #1
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	d158      	bne.n	8000c32 <_malloc_r+0xf6>
 8000b80:	f8d8 4000 	ldr.w	r4, [r8]
 8000b84:	4627      	mov	r7, r4
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d143      	bne.n	8000c12 <_malloc_r+0xd6>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d04b      	beq.n	8000c26 <_malloc_r+0xea>
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	4639      	mov	r1, r7
 8000b92:	4630      	mov	r0, r6
 8000b94:	eb04 0903 	add.w	r9, r4, r3
 8000b98:	f000 f988 	bl	8000eac <_sbrk_r>
 8000b9c:	4581      	cmp	r9, r0
 8000b9e:	d142      	bne.n	8000c26 <_malloc_r+0xea>
 8000ba0:	6821      	ldr	r1, [r4, #0]
 8000ba2:	1a6d      	subs	r5, r5, r1
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	f7ff ffa6 	bl	8000af8 <sbrk_aligned>
 8000bac:	3001      	adds	r0, #1
 8000bae:	d03a      	beq.n	8000c26 <_malloc_r+0xea>
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	442b      	add	r3, r5
 8000bb4:	6023      	str	r3, [r4, #0]
 8000bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	bb62      	cbnz	r2, 8000c18 <_malloc_r+0xdc>
 8000bbe:	f8c8 7000 	str.w	r7, [r8]
 8000bc2:	e00f      	b.n	8000be4 <_malloc_r+0xa8>
 8000bc4:	6822      	ldr	r2, [r4, #0]
 8000bc6:	1b52      	subs	r2, r2, r5
 8000bc8:	d420      	bmi.n	8000c0c <_malloc_r+0xd0>
 8000bca:	2a0b      	cmp	r2, #11
 8000bcc:	d917      	bls.n	8000bfe <_malloc_r+0xc2>
 8000bce:	1961      	adds	r1, r4, r5
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	6025      	str	r5, [r4, #0]
 8000bd4:	bf18      	it	ne
 8000bd6:	6059      	strne	r1, [r3, #4]
 8000bd8:	6863      	ldr	r3, [r4, #4]
 8000bda:	bf08      	it	eq
 8000bdc:	f8c8 1000 	streq.w	r1, [r8]
 8000be0:	5162      	str	r2, [r4, r5]
 8000be2:	604b      	str	r3, [r1, #4]
 8000be4:	4630      	mov	r0, r6
 8000be6:	f000 f82f 	bl	8000c48 <__malloc_unlock>
 8000bea:	f104 000b 	add.w	r0, r4, #11
 8000bee:	1d23      	adds	r3, r4, #4
 8000bf0:	f020 0007 	bic.w	r0, r0, #7
 8000bf4:	1ac2      	subs	r2, r0, r3
 8000bf6:	bf1c      	itt	ne
 8000bf8:	1a1b      	subne	r3, r3, r0
 8000bfa:	50a3      	strne	r3, [r4, r2]
 8000bfc:	e7af      	b.n	8000b5e <_malloc_r+0x22>
 8000bfe:	6862      	ldr	r2, [r4, #4]
 8000c00:	42a3      	cmp	r3, r4
 8000c02:	bf0c      	ite	eq
 8000c04:	f8c8 2000 	streq.w	r2, [r8]
 8000c08:	605a      	strne	r2, [r3, #4]
 8000c0a:	e7eb      	b.n	8000be4 <_malloc_r+0xa8>
 8000c0c:	4623      	mov	r3, r4
 8000c0e:	6864      	ldr	r4, [r4, #4]
 8000c10:	e7ae      	b.n	8000b70 <_malloc_r+0x34>
 8000c12:	463c      	mov	r4, r7
 8000c14:	687f      	ldr	r7, [r7, #4]
 8000c16:	e7b6      	b.n	8000b86 <_malloc_r+0x4a>
 8000c18:	461a      	mov	r2, r3
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	d1fb      	bne.n	8000c18 <_malloc_r+0xdc>
 8000c20:	2300      	movs	r3, #0
 8000c22:	6053      	str	r3, [r2, #4]
 8000c24:	e7de      	b.n	8000be4 <_malloc_r+0xa8>
 8000c26:	230c      	movs	r3, #12
 8000c28:	6033      	str	r3, [r6, #0]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	f000 f80c 	bl	8000c48 <__malloc_unlock>
 8000c30:	e794      	b.n	8000b5c <_malloc_r+0x20>
 8000c32:	6005      	str	r5, [r0, #0]
 8000c34:	e7d6      	b.n	8000be4 <_malloc_r+0xa8>
 8000c36:	bf00      	nop
 8000c38:	200001e4 	.word	0x200001e4

08000c3c <__malloc_lock>:
 8000c3c:	4801      	ldr	r0, [pc, #4]	@ (8000c44 <__malloc_lock+0x8>)
 8000c3e:	f7ff bf0e 	b.w	8000a5e <__retarget_lock_acquire_recursive>
 8000c42:	bf00      	nop
 8000c44:	200001dc 	.word	0x200001dc

08000c48 <__malloc_unlock>:
 8000c48:	4801      	ldr	r0, [pc, #4]	@ (8000c50 <__malloc_unlock+0x8>)
 8000c4a:	f7ff bf09 	b.w	8000a60 <__retarget_lock_release_recursive>
 8000c4e:	bf00      	nop
 8000c50:	200001dc 	.word	0x200001dc

08000c54 <__sflush_r>:
 8000c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5a:	0716      	lsls	r6, r2, #28
 8000c5c:	4605      	mov	r5, r0
 8000c5e:	460c      	mov	r4, r1
 8000c60:	d454      	bmi.n	8000d0c <__sflush_r+0xb8>
 8000c62:	684b      	ldr	r3, [r1, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dc02      	bgt.n	8000c6e <__sflush_r+0x1a>
 8000c68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	dd48      	ble.n	8000d00 <__sflush_r+0xac>
 8000c6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c70:	2e00      	cmp	r6, #0
 8000c72:	d045      	beq.n	8000d00 <__sflush_r+0xac>
 8000c74:	2300      	movs	r3, #0
 8000c76:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c7a:	682f      	ldr	r7, [r5, #0]
 8000c7c:	6a21      	ldr	r1, [r4, #32]
 8000c7e:	602b      	str	r3, [r5, #0]
 8000c80:	d030      	beq.n	8000ce4 <__sflush_r+0x90>
 8000c82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c84:	89a3      	ldrh	r3, [r4, #12]
 8000c86:	0759      	lsls	r1, r3, #29
 8000c88:	d505      	bpl.n	8000c96 <__sflush_r+0x42>
 8000c8a:	6863      	ldr	r3, [r4, #4]
 8000c8c:	1ad2      	subs	r2, r2, r3
 8000c8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c90:	b10b      	cbz	r3, 8000c96 <__sflush_r+0x42>
 8000c92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c94:	1ad2      	subs	r2, r2, r3
 8000c96:	2300      	movs	r3, #0
 8000c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c9a:	6a21      	ldr	r1, [r4, #32]
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	47b0      	blx	r6
 8000ca0:	1c43      	adds	r3, r0, #1
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	d106      	bne.n	8000cb4 <__sflush_r+0x60>
 8000ca6:	6829      	ldr	r1, [r5, #0]
 8000ca8:	291d      	cmp	r1, #29
 8000caa:	d82b      	bhi.n	8000d04 <__sflush_r+0xb0>
 8000cac:	4a28      	ldr	r2, [pc, #160]	@ (8000d50 <__sflush_r+0xfc>)
 8000cae:	410a      	asrs	r2, r1
 8000cb0:	07d6      	lsls	r6, r2, #31
 8000cb2:	d427      	bmi.n	8000d04 <__sflush_r+0xb0>
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6062      	str	r2, [r4, #4]
 8000cb8:	04d9      	lsls	r1, r3, #19
 8000cba:	6922      	ldr	r2, [r4, #16]
 8000cbc:	6022      	str	r2, [r4, #0]
 8000cbe:	d504      	bpl.n	8000cca <__sflush_r+0x76>
 8000cc0:	1c42      	adds	r2, r0, #1
 8000cc2:	d101      	bne.n	8000cc8 <__sflush_r+0x74>
 8000cc4:	682b      	ldr	r3, [r5, #0]
 8000cc6:	b903      	cbnz	r3, 8000cca <__sflush_r+0x76>
 8000cc8:	6560      	str	r0, [r4, #84]	@ 0x54
 8000cca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ccc:	602f      	str	r7, [r5, #0]
 8000cce:	b1b9      	cbz	r1, 8000d00 <__sflush_r+0xac>
 8000cd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d002      	beq.n	8000cde <__sflush_r+0x8a>
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f7ff fec3 	bl	8000a64 <_free_r>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ce2:	e00d      	b.n	8000d00 <__sflush_r+0xac>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	47b0      	blx	r6
 8000cea:	4602      	mov	r2, r0
 8000cec:	1c50      	adds	r0, r2, #1
 8000cee:	d1c9      	bne.n	8000c84 <__sflush_r+0x30>
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0c6      	beq.n	8000c84 <__sflush_r+0x30>
 8000cf6:	2b1d      	cmp	r3, #29
 8000cf8:	d001      	beq.n	8000cfe <__sflush_r+0xaa>
 8000cfa:	2b16      	cmp	r3, #22
 8000cfc:	d11d      	bne.n	8000d3a <__sflush_r+0xe6>
 8000cfe:	602f      	str	r7, [r5, #0]
 8000d00:	2000      	movs	r0, #0
 8000d02:	e021      	b.n	8000d48 <__sflush_r+0xf4>
 8000d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	e01a      	b.n	8000d42 <__sflush_r+0xee>
 8000d0c:	690f      	ldr	r7, [r1, #16]
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d0f6      	beq.n	8000d00 <__sflush_r+0xac>
 8000d12:	0793      	lsls	r3, r2, #30
 8000d14:	680e      	ldr	r6, [r1, #0]
 8000d16:	bf08      	it	eq
 8000d18:	694b      	ldreq	r3, [r1, #20]
 8000d1a:	600f      	str	r7, [r1, #0]
 8000d1c:	bf18      	it	ne
 8000d1e:	2300      	movne	r3, #0
 8000d20:	1bf6      	subs	r6, r6, r7
 8000d22:	608b      	str	r3, [r1, #8]
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	ddeb      	ble.n	8000d00 <__sflush_r+0xac>
 8000d28:	6a21      	ldr	r1, [r4, #32]
 8000d2a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000d2e:	4633      	mov	r3, r6
 8000d30:	463a      	mov	r2, r7
 8000d32:	4628      	mov	r0, r5
 8000d34:	47e0      	blx	ip
 8000d36:	2800      	cmp	r0, #0
 8000d38:	dc07      	bgt.n	8000d4a <__sflush_r+0xf6>
 8000d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d42:	81a3      	strh	r3, [r4, #12]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d4a:	4407      	add	r7, r0
 8000d4c:	1a36      	subs	r6, r6, r0
 8000d4e:	e7e9      	b.n	8000d24 <__sflush_r+0xd0>
 8000d50:	dfbffffe 	.word	0xdfbffffe

08000d54 <_fflush_r>:
 8000d54:	b538      	push	{r3, r4, r5, lr}
 8000d56:	690b      	ldr	r3, [r1, #16]
 8000d58:	4605      	mov	r5, r0
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	b913      	cbnz	r3, 8000d64 <_fflush_r+0x10>
 8000d5e:	2500      	movs	r5, #0
 8000d60:	4628      	mov	r0, r5
 8000d62:	bd38      	pop	{r3, r4, r5, pc}
 8000d64:	b118      	cbz	r0, 8000d6e <_fflush_r+0x1a>
 8000d66:	6a03      	ldr	r3, [r0, #32]
 8000d68:	b90b      	cbnz	r3, 8000d6e <_fflush_r+0x1a>
 8000d6a:	f7ff fc93 	bl	8000694 <__sinit>
 8000d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f3      	beq.n	8000d5e <_fflush_r+0xa>
 8000d76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d78:	07d0      	lsls	r0, r2, #31
 8000d7a:	d404      	bmi.n	8000d86 <_fflush_r+0x32>
 8000d7c:	0599      	lsls	r1, r3, #22
 8000d7e:	d402      	bmi.n	8000d86 <_fflush_r+0x32>
 8000d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d82:	f7ff fe6c 	bl	8000a5e <__retarget_lock_acquire_recursive>
 8000d86:	4628      	mov	r0, r5
 8000d88:	4621      	mov	r1, r4
 8000d8a:	f7ff ff63 	bl	8000c54 <__sflush_r>
 8000d8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d90:	07da      	lsls	r2, r3, #31
 8000d92:	4605      	mov	r5, r0
 8000d94:	d4e4      	bmi.n	8000d60 <_fflush_r+0xc>
 8000d96:	89a3      	ldrh	r3, [r4, #12]
 8000d98:	059b      	lsls	r3, r3, #22
 8000d9a:	d4e1      	bmi.n	8000d60 <_fflush_r+0xc>
 8000d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d9e:	f7ff fe5f 	bl	8000a60 <__retarget_lock_release_recursive>
 8000da2:	e7dd      	b.n	8000d60 <_fflush_r+0xc>

08000da4 <__swhatbuf_r>:
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	460c      	mov	r4, r1
 8000da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dac:	2900      	cmp	r1, #0
 8000dae:	b096      	sub	sp, #88	@ 0x58
 8000db0:	4615      	mov	r5, r2
 8000db2:	461e      	mov	r6, r3
 8000db4:	da0d      	bge.n	8000dd2 <__swhatbuf_r+0x2e>
 8000db6:	89a3      	ldrh	r3, [r4, #12]
 8000db8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000dbc:	f04f 0100 	mov.w	r1, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2340      	movne	r3, #64	@ 0x40
 8000dc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000dc8:	2000      	movs	r0, #0
 8000dca:	6031      	str	r1, [r6, #0]
 8000dcc:	602b      	str	r3, [r5, #0]
 8000dce:	b016      	add	sp, #88	@ 0x58
 8000dd0:	bd70      	pop	{r4, r5, r6, pc}
 8000dd2:	466a      	mov	r2, sp
 8000dd4:	f000 f848 	bl	8000e68 <_fstat_r>
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	dbec      	blt.n	8000db6 <__swhatbuf_r+0x12>
 8000ddc:	9901      	ldr	r1, [sp, #4]
 8000dde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000de2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000de6:	4259      	negs	r1, r3
 8000de8:	4159      	adcs	r1, r3
 8000dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dee:	e7eb      	b.n	8000dc8 <__swhatbuf_r+0x24>

08000df0 <__smakebuf_r>:
 8000df0:	898b      	ldrh	r3, [r1, #12]
 8000df2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000df4:	079d      	lsls	r5, r3, #30
 8000df6:	4606      	mov	r6, r0
 8000df8:	460c      	mov	r4, r1
 8000dfa:	d507      	bpl.n	8000e0c <__smakebuf_r+0x1c>
 8000dfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	6123      	str	r3, [r4, #16]
 8000e04:	2301      	movs	r3, #1
 8000e06:	6163      	str	r3, [r4, #20]
 8000e08:	b003      	add	sp, #12
 8000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0c:	ab01      	add	r3, sp, #4
 8000e0e:	466a      	mov	r2, sp
 8000e10:	f7ff ffc8 	bl	8000da4 <__swhatbuf_r>
 8000e14:	9f00      	ldr	r7, [sp, #0]
 8000e16:	4605      	mov	r5, r0
 8000e18:	4639      	mov	r1, r7
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f7ff fe8e 	bl	8000b3c <_malloc_r>
 8000e20:	b948      	cbnz	r0, 8000e36 <__smakebuf_r+0x46>
 8000e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e26:	059a      	lsls	r2, r3, #22
 8000e28:	d4ee      	bmi.n	8000e08 <__smakebuf_r+0x18>
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	81a3      	strh	r3, [r4, #12]
 8000e34:	e7e2      	b.n	8000dfc <__smakebuf_r+0xc>
 8000e36:	89a3      	ldrh	r3, [r4, #12]
 8000e38:	6020      	str	r0, [r4, #0]
 8000e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e3e:	81a3      	strh	r3, [r4, #12]
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e46:	b15b      	cbz	r3, 8000e60 <__smakebuf_r+0x70>
 8000e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f000 f81d 	bl	8000e8c <_isatty_r>
 8000e52:	b128      	cbz	r0, 8000e60 <__smakebuf_r+0x70>
 8000e54:	89a3      	ldrh	r3, [r4, #12]
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	81a3      	strh	r3, [r4, #12]
 8000e60:	89a3      	ldrh	r3, [r4, #12]
 8000e62:	431d      	orrs	r5, r3
 8000e64:	81a5      	strh	r5, [r4, #12]
 8000e66:	e7cf      	b.n	8000e08 <__smakebuf_r+0x18>

08000e68 <_fstat_r>:
 8000e68:	b538      	push	{r3, r4, r5, lr}
 8000e6a:	4d07      	ldr	r5, [pc, #28]	@ (8000e88 <_fstat_r+0x20>)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	4611      	mov	r1, r2
 8000e74:	602b      	str	r3, [r5, #0]
 8000e76:	f7ff fafb 	bl	8000470 <_fstat>
 8000e7a:	1c43      	adds	r3, r0, #1
 8000e7c:	d102      	bne.n	8000e84 <_fstat_r+0x1c>
 8000e7e:	682b      	ldr	r3, [r5, #0]
 8000e80:	b103      	cbz	r3, 8000e84 <_fstat_r+0x1c>
 8000e82:	6023      	str	r3, [r4, #0]
 8000e84:	bd38      	pop	{r3, r4, r5, pc}
 8000e86:	bf00      	nop
 8000e88:	200001d8 	.word	0x200001d8

08000e8c <_isatty_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4d06      	ldr	r5, [pc, #24]	@ (8000ea8 <_isatty_r+0x1c>)
 8000e90:	2300      	movs	r3, #0
 8000e92:	4604      	mov	r4, r0
 8000e94:	4608      	mov	r0, r1
 8000e96:	602b      	str	r3, [r5, #0]
 8000e98:	f7ff faf9 	bl	800048e <_isatty>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	d102      	bne.n	8000ea6 <_isatty_r+0x1a>
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	b103      	cbz	r3, 8000ea6 <_isatty_r+0x1a>
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
 8000ea8:	200001d8 	.word	0x200001d8

08000eac <_sbrk_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4d06      	ldr	r5, [pc, #24]	@ (8000ec8 <_sbrk_r+0x1c>)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	602b      	str	r3, [r5, #0]
 8000eb8:	f7ff fb00 	bl	80004bc <_sbrk>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk_r+0x1a>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	b103      	cbz	r3, 8000ec6 <_sbrk_r+0x1a>
 8000ec4:	6023      	str	r3, [r4, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	200001d8 	.word	0x200001d8

08000ecc <_init>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	bf00      	nop
 8000ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed2:	bc08      	pop	{r3}
 8000ed4:	469e      	mov	lr, r3
 8000ed6:	4770      	bx	lr

08000ed8 <_fini>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr

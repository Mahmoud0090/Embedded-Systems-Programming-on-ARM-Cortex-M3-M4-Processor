
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000de0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08000fa4  08000fa4  00001fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001034  08001034  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08001034  08001034  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001034  08001034  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001034  08001034  00002034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001038  08001038  00002038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800103c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  080010a8  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080010a8  000031ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b04  00000000  00000000  00003096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c1  00000000  00000000  00003b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00003f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000113  00000000  00000000  000040e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2b  00000000  00000000  000041fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000165a  00000000  00000000  00006f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009a68  00000000  00000000  00008580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011fe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b6c  00000000  00000000  0001202c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00012b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f8c 	.word	0x08000f8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000070 	.word	0x20000070
 8000200:	08000f8c 	.word	0x08000f8c

08000204 <main>:
uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0; // task 1 in running

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000208:	f000 f8c8 	bl	800039c <enable_processor_faults>
	init_scheduler_stack(SCHED_STACK_START);
 800020c:	480d      	ldr	r0, [pc, #52]	@ (8000244 <main+0x40>)
 800020e:	f000 f879 	bl	8000304 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 8000212:	4a0d      	ldr	r2, [pc, #52]	@ (8000248 <main+0x44>)
 8000214:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <main+0x48>)
 8000216:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000218:	4a0d      	ldr	r2, [pc, #52]	@ (8000250 <main+0x4c>)
 800021a:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <main+0x48>)
 800021c:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 800021e:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <main+0x50>)
 8000220:	4b0a      	ldr	r3, [pc, #40]	@ (800024c <main+0x48>)
 8000222:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000224:	4a0c      	ldr	r2, [pc, #48]	@ (8000258 <main+0x54>)
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <main+0x48>)
 8000228:	60da      	str	r2, [r3, #12]

	init_task_stack();
 800022a:	f000 f871 	bl	8000310 <init_task_stack>

    init_systick_timer(TICK_HZ);
 800022e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000232:	f000 f833 	bl	800029c <init_systick_timer>

    switch_sp_to_psp();
 8000236:	f000 f8e5 	bl	8000404 <switch_sp_to_psp>

    task1_handler();
 800023a:	f000 f80f 	bl	800025c <task1_handler>

	for(;;);
 800023e:	bf00      	nop
 8000240:	e7fd      	b.n	800023e <main+0x3a>
 8000242:	bf00      	nop
 8000244:	1ffa0000 	.word	0x1ffa0000
 8000248:	0800025d 	.word	0x0800025d
 800024c:	20000088 	.word	0x20000088
 8000250:	0800026d 	.word	0x0800026d
 8000254:	0800027d 	.word	0x0800027d
 8000258:	0800028d 	.word	0x0800028d

0800025c <task1_handler>:
}

void task1_handler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is task1\n");
 8000260:	4801      	ldr	r0, [pc, #4]	@ (8000268 <task1_handler+0xc>)
 8000262:	f000 fb03 	bl	800086c <puts>
 8000266:	e7fb      	b.n	8000260 <task1_handler+0x4>
 8000268:	08000fa4 	.word	0x08000fa4

0800026c <task2_handler>:
	}
}
void task2_handler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is task2\n");
 8000270:	4801      	ldr	r0, [pc, #4]	@ (8000278 <task2_handler+0xc>)
 8000272:	f000 fafb 	bl	800086c <puts>
 8000276:	e7fb      	b.n	8000270 <task2_handler+0x4>
 8000278:	08000fb4 	.word	0x08000fb4

0800027c <task3_handler>:
	}

}
void task3_handler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is task3\n");
 8000280:	4801      	ldr	r0, [pc, #4]	@ (8000288 <task3_handler+0xc>)
 8000282:	f000 faf3 	bl	800086c <puts>
 8000286:	e7fb      	b.n	8000280 <task3_handler+0x4>
 8000288:	08000fc4 	.word	0x08000fc4

0800028c <task4_handler>:
	}

}
void task4_handler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is task4\n");
 8000290:	4801      	ldr	r0, [pc, #4]	@ (8000298 <task4_handler+0xc>)
 8000292:	f000 faeb 	bl	800086c <puts>
 8000296:	e7fb      	b.n	8000290 <task4_handler+0x4>
 8000298:	08000fd4 	.word	0x08000fd4

0800029c <init_systick_timer>:
	}

}

void init_systick_timer(uint32_t tick_hz)
{
 800029c:	b480      	push	{r7}
 800029e:	b087      	sub	sp, #28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t *)0xE000E014; // SysTick Reload Value Register
 80002a4:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <init_systick_timer+0x5c>)
 80002a6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t *)0xE000E010; //SysTick Control and Status Register
 80002a8:	4b14      	ldr	r3, [pc, #80]	@ (80002fc <init_systick_timer+0x60>)
 80002aa:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1;
 80002ac:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <init_systick_timer+0x64>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	3b01      	subs	r3, #1
 80002b6:	60fb      	str	r3, [r7, #12]

	//clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]


	//load the value to SVR
	*pSRVR |= count_value;
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	431a      	orrs	r2, r3
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	601a      	str	r2, [r3, #0]

	//do some setting
	*pSCSR |= (1 << 1); //  Enables SysTick exception request
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0202 	orr.w	r2, r3, #2
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //  Indicates the clock source, processor clock source
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 0204 	orr.w	r2, r3, #4
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	601a      	str	r2, [r3, #0]

	//enable the systick
	*pSCSR |= (1 << 0); // enable the counter
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f043 0201 	orr.w	r2, r3, #1
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	371c      	adds	r7, #28
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	e000e014 	.word	0xe000e014
 80002fc:	e000e010 	.word	0xe000e010
 8000300:	00f42400 	.word	0x00f42400

08000304 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000304:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP, %0" : : "r" (sched_top_of_stack) : );
 8000306:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 800030a:	4770      	bx	lr
}
 800030c:	bf00      	nop
	...

08000310 <init_task_stack>:


void init_task_stack(void)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
	uint32_t* pPSP;

	for(int i = 0; i<MAX_TASKS ; i++)
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	e032      	b.n	8000382 <init_task_stack+0x72>
	{
		pPSP = (uint32_t *)psp_of_tasks[i];
 800031c:	4a1d      	ldr	r2, [pc, #116]	@ (8000394 <init_task_stack+0x84>)
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3b04      	subs	r3, #4
 800032a:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000332:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	3b04      	subs	r3, #4
 8000338:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800033a:	4a17      	ldr	r2, [pc, #92]	@ (8000398 <init_task_stack+0x88>)
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	601a      	str	r2, [r3, #0]

		pPSP--;//LR
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3b04      	subs	r3, #4
 800034a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f06f 0202 	mvn.w	r2, #2
 8000352:	601a      	str	r2, [r3, #0]

		//R0 to R12

		for(int j = 0 ;i<13; j++)
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	e008      	b.n	800036c <init_task_stack+0x5c>
		{
			pPSP--;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3b04      	subs	r3, #4
 800035e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
		for(int j = 0 ;i<13; j++)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	2b0c      	cmp	r3, #12
 8000370:	ddf3      	ble.n	800035a <init_task_stack+0x4a>
		}

		//storing the value of psp
		psp_of_tasks[i] = (uint32_t)pPSP;
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	4907      	ldr	r1, [pc, #28]	@ (8000394 <init_task_stack+0x84>)
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i<MAX_TASKS ; i++)
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	3301      	adds	r3, #1
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	2b03      	cmp	r3, #3
 8000386:	ddc9      	ble.n	800031c <init_task_stack+0xc>
	}

}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	20000000 	.word	0x20000000
 8000398:	20000088 	.word	0x20000088

0800039c <enable_processor_faults>:

void enable_processor_faults(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
	uint32_t* pSHCHR = (uint32_t *) 0xE000ED24;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <enable_processor_faults+0x38>)
 80003a4:	607b      	str	r3, [r7, #4]

	*pSHCHR |= (1 << 16); //mem manage fault
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	601a      	str	r2, [r3, #0]
	*pSHCHR |= (1 << 17); // bus fault
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
	*pSHCHR |= (1 << 18); //usage fault
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	e000ed24 	.word	0xe000ed24

080003d8 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0


}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <get_psp_value>:

uint32_t get_psp_value(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003e8:	4b04      	ldr	r3, [pc, #16]	@ (80003fc <get_psp_value+0x18>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b04      	ldr	r3, [pc, #16]	@ (8000400 <get_psp_value+0x1c>)
 80003f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	20000098 	.word	0x20000098
 8000400:	20000000 	.word	0x20000000

08000404 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
	//1- initialize the PSP with TASK1 stack start address

	//get the value of psp of current task
	__asm volatile("PUSH {LR}"); // preserve LR wheich connects back to main
 8000404:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 8000406:	f7ff ffed 	bl	80003e4 <get_psp_value>
	__asm volatile("MSR PSP, R0");// initialize psp
 800040a:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); // pops back LR value
 800040e:	f85d eb04 	ldr.w	lr, [sp], #4

	//2- change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0X02 ");
 8000412:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 8000416:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 800041a:	4770      	bx	lr

}
 800041c:	bf00      	nop
	...

08000420 <HardFault_Handler>:

//2-implement the fault handler

void HardFault_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	printf("exception : Hardfault\n");
 8000424:	4802      	ldr	r0, [pc, #8]	@ (8000430 <HardFault_Handler+0x10>)
 8000426:	f000 fa21 	bl	800086c <puts>
	while(1);
 800042a:	bf00      	nop
 800042c:	e7fd      	b.n	800042a <HardFault_Handler+0xa>
 800042e:	bf00      	nop
 8000430:	08000fe4 	.word	0x08000fe4

08000434 <MemManage_Handler>:

}
void MemManage_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	printf("exception : Mem manage fault\n");
 8000438:	4802      	ldr	r0, [pc, #8]	@ (8000444 <MemManage_Handler+0x10>)
 800043a:	f000 fa17 	bl	800086c <puts>
	while(1);
 800043e:	bf00      	nop
 8000440:	e7fd      	b.n	800043e <MemManage_Handler+0xa>
 8000442:	bf00      	nop
 8000444:	08000ffc 	.word	0x08000ffc

08000448 <BusFault_Handler>:

}

void BusFault_Handler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	printf("exception : Busfault\n");
 800044c:	4802      	ldr	r0, [pc, #8]	@ (8000458 <BusFault_Handler+0x10>)
 800044e:	f000 fa0d 	bl	800086c <puts>
	while(1);
 8000452:	bf00      	nop
 8000454:	e7fd      	b.n	8000452 <BusFault_Handler+0xa>
 8000456:	bf00      	nop
 8000458:	0800101c 	.word	0x0800101c

0800045c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <ITM_SendChar+0x44>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a0d      	ldr	r2, [pc, #52]	@ (80004a0 <ITM_SendChar+0x44>)
 800046c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000470:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <ITM_SendChar+0x48>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a0b      	ldr	r2, [pc, #44]	@ (80004a4 <ITM_SendChar+0x48>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800047e:	bf00      	nop
 8000480:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0f8      	beq.n	8000480 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800048e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	6013      	str	r3, [r2, #0]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	e000edfc 	.word	0xe000edfc
 80004a4:	e0000e00 	.word	0xe0000e00

080004a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	e00a      	b.n	80004d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ba:	f3af 8000 	nop.w
 80004be:	4601      	mov	r1, r0
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	1c5a      	adds	r2, r3, #1
 80004c4:	60ba      	str	r2, [r7, #8]
 80004c6:	b2ca      	uxtb	r2, r1
 80004c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	3301      	adds	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	697a      	ldr	r2, [r7, #20]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dbf0      	blt.n	80004ba <_read+0x12>
  }

  return len;
 80004d8:	687b      	ldr	r3, [r7, #4]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	60f8      	str	r0, [r7, #12]
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	e009      	b.n	8000508 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	60ba      	str	r2, [r7, #8]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ffad 	bl	800045c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf1      	blt.n	80004f4 <_write+0x12>
  }
  return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_close>:

int _close(int file)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000540:	605a      	str	r2, [r3, #4]
  return 0;
 8000542:	2300      	movs	r3, #0
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <_isatty>:

int _isatty(int file)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000562:	b480      	push	{r7}
 8000564:	b085      	sub	sp, #20
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
	...

0800057c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000584:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <_sbrk+0x5c>)
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <_sbrk+0x60>)
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000590:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <_sbrk+0x64>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <_sbrk+0x64>)
 800059a:	4a12      	ldr	r2, [pc, #72]	@ (80005e4 <_sbrk+0x68>)
 800059c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d207      	bcs.n	80005bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ac:	f000 fa8c 	bl	8000ac8 <__errno>
 80005b0:	4603      	mov	r3, r0
 80005b2:	220c      	movs	r2, #12
 80005b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	e009      	b.n	80005d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <_sbrk+0x64>)
 80005cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20020000 	.word	0x20020000
 80005dc:	00000400 	.word	0x00000400
 80005e0:	2000009c 	.word	0x2000009c
 80005e4:	200001f0 	.word	0x200001f0

080005e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f2:	490d      	ldr	r1, [pc, #52]	@ (8000628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <LoopForever+0xe>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000608:	4c0a      	ldr	r4, [pc, #40]	@ (8000634 <LoopForever+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000616:	f000 fa5d 	bl	8000ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fdf3 	bl	8000204 <main>

0800061e <LoopForever>:

LoopForever:
  b LoopForever
 800061e:	e7fe      	b.n	800061e <LoopForever>
  ldr   r0, =_estack
 8000620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800062c:	0800103c 	.word	0x0800103c
  ldr r2, =_sbss
 8000630:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000634:	200001ec 	.word	0x200001ec

08000638 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <std>:
 800063c:	2300      	movs	r3, #0
 800063e:	b510      	push	{r4, lr}
 8000640:	4604      	mov	r4, r0
 8000642:	e9c0 3300 	strd	r3, r3, [r0]
 8000646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800064a:	6083      	str	r3, [r0, #8]
 800064c:	8181      	strh	r1, [r0, #12]
 800064e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000650:	81c2      	strh	r2, [r0, #14]
 8000652:	6183      	str	r3, [r0, #24]
 8000654:	4619      	mov	r1, r3
 8000656:	2208      	movs	r2, #8
 8000658:	305c      	adds	r0, #92	@ 0x5c
 800065a:	f000 f9e7 	bl	8000a2c <memset>
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <std+0x58>)
 8000660:	6263      	str	r3, [r4, #36]	@ 0x24
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <std+0x5c>)
 8000664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <std+0x60>)
 8000668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <std+0x64>)
 800066c:	6323      	str	r3, [r4, #48]	@ 0x30
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <std+0x68>)
 8000670:	6224      	str	r4, [r4, #32]
 8000672:	429c      	cmp	r4, r3
 8000674:	d006      	beq.n	8000684 <std+0x48>
 8000676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800067a:	4294      	cmp	r4, r2
 800067c:	d002      	beq.n	8000684 <std+0x48>
 800067e:	33d0      	adds	r3, #208	@ 0xd0
 8000680:	429c      	cmp	r4, r3
 8000682:	d105      	bne.n	8000690 <std+0x54>
 8000684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800068c:	f000 ba46 	b.w	8000b1c <__retarget_lock_init_recursive>
 8000690:	bd10      	pop	{r4, pc}
 8000692:	bf00      	nop
 8000694:	0800087d 	.word	0x0800087d
 8000698:	0800089f 	.word	0x0800089f
 800069c:	080008d7 	.word	0x080008d7
 80006a0:	080008fb 	.word	0x080008fb
 80006a4:	200000a0 	.word	0x200000a0

080006a8 <stdio_exit_handler>:
 80006a8:	4a02      	ldr	r2, [pc, #8]	@ (80006b4 <stdio_exit_handler+0xc>)
 80006aa:	4903      	ldr	r1, [pc, #12]	@ (80006b8 <stdio_exit_handler+0x10>)
 80006ac:	4803      	ldr	r0, [pc, #12]	@ (80006bc <stdio_exit_handler+0x14>)
 80006ae:	f000 b869 	b.w	8000784 <_fwalk_sglue>
 80006b2:	bf00      	nop
 80006b4:	20000010 	.word	0x20000010
 80006b8:	08000e15 	.word	0x08000e15
 80006bc:	20000020 	.word	0x20000020

080006c0 <cleanup_stdio>:
 80006c0:	6841      	ldr	r1, [r0, #4]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <cleanup_stdio+0x34>)
 80006c4:	4299      	cmp	r1, r3
 80006c6:	b510      	push	{r4, lr}
 80006c8:	4604      	mov	r4, r0
 80006ca:	d001      	beq.n	80006d0 <cleanup_stdio+0x10>
 80006cc:	f000 fba2 	bl	8000e14 <_fflush_r>
 80006d0:	68a1      	ldr	r1, [r4, #8]
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <cleanup_stdio+0x38>)
 80006d4:	4299      	cmp	r1, r3
 80006d6:	d002      	beq.n	80006de <cleanup_stdio+0x1e>
 80006d8:	4620      	mov	r0, r4
 80006da:	f000 fb9b 	bl	8000e14 <_fflush_r>
 80006de:	68e1      	ldr	r1, [r4, #12]
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <cleanup_stdio+0x3c>)
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d004      	beq.n	80006f0 <cleanup_stdio+0x30>
 80006e6:	4620      	mov	r0, r4
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ec:	f000 bb92 	b.w	8000e14 <_fflush_r>
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	bf00      	nop
 80006f4:	200000a0 	.word	0x200000a0
 80006f8:	20000108 	.word	0x20000108
 80006fc:	20000170 	.word	0x20000170

08000700 <global_stdio_init.part.0>:
 8000700:	b510      	push	{r4, lr}
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <global_stdio_init.part.0+0x30>)
 8000704:	4c0b      	ldr	r4, [pc, #44]	@ (8000734 <global_stdio_init.part.0+0x34>)
 8000706:	4a0c      	ldr	r2, [pc, #48]	@ (8000738 <global_stdio_init.part.0+0x38>)
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	4620      	mov	r0, r4
 800070c:	2200      	movs	r2, #0
 800070e:	2104      	movs	r1, #4
 8000710:	f7ff ff94 	bl	800063c <std>
 8000714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000718:	2201      	movs	r2, #1
 800071a:	2109      	movs	r1, #9
 800071c:	f7ff ff8e 	bl	800063c <std>
 8000720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000724:	2202      	movs	r2, #2
 8000726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800072a:	2112      	movs	r1, #18
 800072c:	f7ff bf86 	b.w	800063c <std>
 8000730:	200001d8 	.word	0x200001d8
 8000734:	200000a0 	.word	0x200000a0
 8000738:	080006a9 	.word	0x080006a9

0800073c <__sfp_lock_acquire>:
 800073c:	4801      	ldr	r0, [pc, #4]	@ (8000744 <__sfp_lock_acquire+0x8>)
 800073e:	f000 b9ee 	b.w	8000b1e <__retarget_lock_acquire_recursive>
 8000742:	bf00      	nop
 8000744:	200001e1 	.word	0x200001e1

08000748 <__sfp_lock_release>:
 8000748:	4801      	ldr	r0, [pc, #4]	@ (8000750 <__sfp_lock_release+0x8>)
 800074a:	f000 b9e9 	b.w	8000b20 <__retarget_lock_release_recursive>
 800074e:	bf00      	nop
 8000750:	200001e1 	.word	0x200001e1

08000754 <__sinit>:
 8000754:	b510      	push	{r4, lr}
 8000756:	4604      	mov	r4, r0
 8000758:	f7ff fff0 	bl	800073c <__sfp_lock_acquire>
 800075c:	6a23      	ldr	r3, [r4, #32]
 800075e:	b11b      	cbz	r3, 8000768 <__sinit+0x14>
 8000760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000764:	f7ff bff0 	b.w	8000748 <__sfp_lock_release>
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <__sinit+0x28>)
 800076a:	6223      	str	r3, [r4, #32]
 800076c:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <__sinit+0x2c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1f5      	bne.n	8000760 <__sinit+0xc>
 8000774:	f7ff ffc4 	bl	8000700 <global_stdio_init.part.0>
 8000778:	e7f2      	b.n	8000760 <__sinit+0xc>
 800077a:	bf00      	nop
 800077c:	080006c1 	.word	0x080006c1
 8000780:	200001d8 	.word	0x200001d8

08000784 <_fwalk_sglue>:
 8000784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000788:	4607      	mov	r7, r0
 800078a:	4688      	mov	r8, r1
 800078c:	4614      	mov	r4, r2
 800078e:	2600      	movs	r6, #0
 8000790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000794:	f1b9 0901 	subs.w	r9, r9, #1
 8000798:	d505      	bpl.n	80007a6 <_fwalk_sglue+0x22>
 800079a:	6824      	ldr	r4, [r4, #0]
 800079c:	2c00      	cmp	r4, #0
 800079e:	d1f7      	bne.n	8000790 <_fwalk_sglue+0xc>
 80007a0:	4630      	mov	r0, r6
 80007a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007a6:	89ab      	ldrh	r3, [r5, #12]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d907      	bls.n	80007bc <_fwalk_sglue+0x38>
 80007ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007b0:	3301      	adds	r3, #1
 80007b2:	d003      	beq.n	80007bc <_fwalk_sglue+0x38>
 80007b4:	4629      	mov	r1, r5
 80007b6:	4638      	mov	r0, r7
 80007b8:	47c0      	blx	r8
 80007ba:	4306      	orrs	r6, r0
 80007bc:	3568      	adds	r5, #104	@ 0x68
 80007be:	e7e9      	b.n	8000794 <_fwalk_sglue+0x10>

080007c0 <_puts_r>:
 80007c0:	6a03      	ldr	r3, [r0, #32]
 80007c2:	b570      	push	{r4, r5, r6, lr}
 80007c4:	6884      	ldr	r4, [r0, #8]
 80007c6:	4605      	mov	r5, r0
 80007c8:	460e      	mov	r6, r1
 80007ca:	b90b      	cbnz	r3, 80007d0 <_puts_r+0x10>
 80007cc:	f7ff ffc2 	bl	8000754 <__sinit>
 80007d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007d2:	07db      	lsls	r3, r3, #31
 80007d4:	d405      	bmi.n	80007e2 <_puts_r+0x22>
 80007d6:	89a3      	ldrh	r3, [r4, #12]
 80007d8:	0598      	lsls	r0, r3, #22
 80007da:	d402      	bmi.n	80007e2 <_puts_r+0x22>
 80007dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007de:	f000 f99e 	bl	8000b1e <__retarget_lock_acquire_recursive>
 80007e2:	89a3      	ldrh	r3, [r4, #12]
 80007e4:	0719      	lsls	r1, r3, #28
 80007e6:	d502      	bpl.n	80007ee <_puts_r+0x2e>
 80007e8:	6923      	ldr	r3, [r4, #16]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d135      	bne.n	800085a <_puts_r+0x9a>
 80007ee:	4621      	mov	r1, r4
 80007f0:	4628      	mov	r0, r5
 80007f2:	f000 f8c5 	bl	8000980 <__swsetup_r>
 80007f6:	b380      	cbz	r0, 800085a <_puts_r+0x9a>
 80007f8:	f04f 35ff 	mov.w	r5, #4294967295
 80007fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007fe:	07da      	lsls	r2, r3, #31
 8000800:	d405      	bmi.n	800080e <_puts_r+0x4e>
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	059b      	lsls	r3, r3, #22
 8000806:	d402      	bmi.n	800080e <_puts_r+0x4e>
 8000808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800080a:	f000 f989 	bl	8000b20 <__retarget_lock_release_recursive>
 800080e:	4628      	mov	r0, r5
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	2b00      	cmp	r3, #0
 8000814:	da04      	bge.n	8000820 <_puts_r+0x60>
 8000816:	69a2      	ldr	r2, [r4, #24]
 8000818:	429a      	cmp	r2, r3
 800081a:	dc17      	bgt.n	800084c <_puts_r+0x8c>
 800081c:	290a      	cmp	r1, #10
 800081e:	d015      	beq.n	800084c <_puts_r+0x8c>
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	6022      	str	r2, [r4, #0]
 8000826:	7019      	strb	r1, [r3, #0]
 8000828:	68a3      	ldr	r3, [r4, #8]
 800082a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800082e:	3b01      	subs	r3, #1
 8000830:	60a3      	str	r3, [r4, #8]
 8000832:	2900      	cmp	r1, #0
 8000834:	d1ed      	bne.n	8000812 <_puts_r+0x52>
 8000836:	2b00      	cmp	r3, #0
 8000838:	da11      	bge.n	800085e <_puts_r+0x9e>
 800083a:	4622      	mov	r2, r4
 800083c:	210a      	movs	r1, #10
 800083e:	4628      	mov	r0, r5
 8000840:	f000 f85f 	bl	8000902 <__swbuf_r>
 8000844:	3001      	adds	r0, #1
 8000846:	d0d7      	beq.n	80007f8 <_puts_r+0x38>
 8000848:	250a      	movs	r5, #10
 800084a:	e7d7      	b.n	80007fc <_puts_r+0x3c>
 800084c:	4622      	mov	r2, r4
 800084e:	4628      	mov	r0, r5
 8000850:	f000 f857 	bl	8000902 <__swbuf_r>
 8000854:	3001      	adds	r0, #1
 8000856:	d1e7      	bne.n	8000828 <_puts_r+0x68>
 8000858:	e7ce      	b.n	80007f8 <_puts_r+0x38>
 800085a:	3e01      	subs	r6, #1
 800085c:	e7e4      	b.n	8000828 <_puts_r+0x68>
 800085e:	6823      	ldr	r3, [r4, #0]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	6022      	str	r2, [r4, #0]
 8000864:	220a      	movs	r2, #10
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e7ee      	b.n	8000848 <_puts_r+0x88>
	...

0800086c <puts>:
 800086c:	4b02      	ldr	r3, [pc, #8]	@ (8000878 <puts+0xc>)
 800086e:	4601      	mov	r1, r0
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f7ff bfa5 	b.w	80007c0 <_puts_r>
 8000876:	bf00      	nop
 8000878:	2000001c 	.word	0x2000001c

0800087c <__sread>:
 800087c:	b510      	push	{r4, lr}
 800087e:	460c      	mov	r4, r1
 8000880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000884:	f000 f8fc 	bl	8000a80 <_read_r>
 8000888:	2800      	cmp	r0, #0
 800088a:	bfab      	itete	ge
 800088c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800088e:	89a3      	ldrhlt	r3, [r4, #12]
 8000890:	181b      	addge	r3, r3, r0
 8000892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000896:	bfac      	ite	ge
 8000898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800089a:	81a3      	strhlt	r3, [r4, #12]
 800089c:	bd10      	pop	{r4, pc}

0800089e <__swrite>:
 800089e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008a2:	461f      	mov	r7, r3
 80008a4:	898b      	ldrh	r3, [r1, #12]
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	4605      	mov	r5, r0
 80008aa:	460c      	mov	r4, r1
 80008ac:	4616      	mov	r6, r2
 80008ae:	d505      	bpl.n	80008bc <__swrite+0x1e>
 80008b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b4:	2302      	movs	r3, #2
 80008b6:	2200      	movs	r2, #0
 80008b8:	f000 f8d0 	bl	8000a5c <_lseek_r>
 80008bc:	89a3      	ldrh	r3, [r4, #12]
 80008be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008c6:	81a3      	strh	r3, [r4, #12]
 80008c8:	4632      	mov	r2, r6
 80008ca:	463b      	mov	r3, r7
 80008cc:	4628      	mov	r0, r5
 80008ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008d2:	f000 b8e7 	b.w	8000aa4 <_write_r>

080008d6 <__sseek>:
 80008d6:	b510      	push	{r4, lr}
 80008d8:	460c      	mov	r4, r1
 80008da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008de:	f000 f8bd 	bl	8000a5c <_lseek_r>
 80008e2:	1c43      	adds	r3, r0, #1
 80008e4:	89a3      	ldrh	r3, [r4, #12]
 80008e6:	bf15      	itete	ne
 80008e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008f2:	81a3      	strheq	r3, [r4, #12]
 80008f4:	bf18      	it	ne
 80008f6:	81a3      	strhne	r3, [r4, #12]
 80008f8:	bd10      	pop	{r4, pc}

080008fa <__sclose>:
 80008fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008fe:	f000 b89d 	b.w	8000a3c <_close_r>

08000902 <__swbuf_r>:
 8000902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000904:	460e      	mov	r6, r1
 8000906:	4614      	mov	r4, r2
 8000908:	4605      	mov	r5, r0
 800090a:	b118      	cbz	r0, 8000914 <__swbuf_r+0x12>
 800090c:	6a03      	ldr	r3, [r0, #32]
 800090e:	b90b      	cbnz	r3, 8000914 <__swbuf_r+0x12>
 8000910:	f7ff ff20 	bl	8000754 <__sinit>
 8000914:	69a3      	ldr	r3, [r4, #24]
 8000916:	60a3      	str	r3, [r4, #8]
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	071a      	lsls	r2, r3, #28
 800091c:	d501      	bpl.n	8000922 <__swbuf_r+0x20>
 800091e:	6923      	ldr	r3, [r4, #16]
 8000920:	b943      	cbnz	r3, 8000934 <__swbuf_r+0x32>
 8000922:	4621      	mov	r1, r4
 8000924:	4628      	mov	r0, r5
 8000926:	f000 f82b 	bl	8000980 <__swsetup_r>
 800092a:	b118      	cbz	r0, 8000934 <__swbuf_r+0x32>
 800092c:	f04f 37ff 	mov.w	r7, #4294967295
 8000930:	4638      	mov	r0, r7
 8000932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	6922      	ldr	r2, [r4, #16]
 8000938:	1a98      	subs	r0, r3, r2
 800093a:	6963      	ldr	r3, [r4, #20]
 800093c:	b2f6      	uxtb	r6, r6
 800093e:	4283      	cmp	r3, r0
 8000940:	4637      	mov	r7, r6
 8000942:	dc05      	bgt.n	8000950 <__swbuf_r+0x4e>
 8000944:	4621      	mov	r1, r4
 8000946:	4628      	mov	r0, r5
 8000948:	f000 fa64 	bl	8000e14 <_fflush_r>
 800094c:	2800      	cmp	r0, #0
 800094e:	d1ed      	bne.n	800092c <__swbuf_r+0x2a>
 8000950:	68a3      	ldr	r3, [r4, #8]
 8000952:	3b01      	subs	r3, #1
 8000954:	60a3      	str	r3, [r4, #8]
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	6022      	str	r2, [r4, #0]
 800095c:	701e      	strb	r6, [r3, #0]
 800095e:	6962      	ldr	r2, [r4, #20]
 8000960:	1c43      	adds	r3, r0, #1
 8000962:	429a      	cmp	r2, r3
 8000964:	d004      	beq.n	8000970 <__swbuf_r+0x6e>
 8000966:	89a3      	ldrh	r3, [r4, #12]
 8000968:	07db      	lsls	r3, r3, #31
 800096a:	d5e1      	bpl.n	8000930 <__swbuf_r+0x2e>
 800096c:	2e0a      	cmp	r6, #10
 800096e:	d1df      	bne.n	8000930 <__swbuf_r+0x2e>
 8000970:	4621      	mov	r1, r4
 8000972:	4628      	mov	r0, r5
 8000974:	f000 fa4e 	bl	8000e14 <_fflush_r>
 8000978:	2800      	cmp	r0, #0
 800097a:	d0d9      	beq.n	8000930 <__swbuf_r+0x2e>
 800097c:	e7d6      	b.n	800092c <__swbuf_r+0x2a>
	...

08000980 <__swsetup_r>:
 8000980:	b538      	push	{r3, r4, r5, lr}
 8000982:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <__swsetup_r+0xa8>)
 8000984:	4605      	mov	r5, r0
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	460c      	mov	r4, r1
 800098a:	b118      	cbz	r0, 8000994 <__swsetup_r+0x14>
 800098c:	6a03      	ldr	r3, [r0, #32]
 800098e:	b90b      	cbnz	r3, 8000994 <__swsetup_r+0x14>
 8000990:	f7ff fee0 	bl	8000754 <__sinit>
 8000994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000998:	0719      	lsls	r1, r3, #28
 800099a:	d422      	bmi.n	80009e2 <__swsetup_r+0x62>
 800099c:	06da      	lsls	r2, r3, #27
 800099e:	d407      	bmi.n	80009b0 <__swsetup_r+0x30>
 80009a0:	2209      	movs	r2, #9
 80009a2:	602a      	str	r2, [r5, #0]
 80009a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a8:	81a3      	strh	r3, [r4, #12]
 80009aa:	f04f 30ff 	mov.w	r0, #4294967295
 80009ae:	e033      	b.n	8000a18 <__swsetup_r+0x98>
 80009b0:	0758      	lsls	r0, r3, #29
 80009b2:	d512      	bpl.n	80009da <__swsetup_r+0x5a>
 80009b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009b6:	b141      	cbz	r1, 80009ca <__swsetup_r+0x4a>
 80009b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009bc:	4299      	cmp	r1, r3
 80009be:	d002      	beq.n	80009c6 <__swsetup_r+0x46>
 80009c0:	4628      	mov	r0, r5
 80009c2:	f000 f8af 	bl	8000b24 <_free_r>
 80009c6:	2300      	movs	r3, #0
 80009c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80009ca:	89a3      	ldrh	r3, [r4, #12]
 80009cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80009d0:	81a3      	strh	r3, [r4, #12]
 80009d2:	2300      	movs	r3, #0
 80009d4:	6063      	str	r3, [r4, #4]
 80009d6:	6923      	ldr	r3, [r4, #16]
 80009d8:	6023      	str	r3, [r4, #0]
 80009da:	89a3      	ldrh	r3, [r4, #12]
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	81a3      	strh	r3, [r4, #12]
 80009e2:	6923      	ldr	r3, [r4, #16]
 80009e4:	b94b      	cbnz	r3, 80009fa <__swsetup_r+0x7a>
 80009e6:	89a3      	ldrh	r3, [r4, #12]
 80009e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009f0:	d003      	beq.n	80009fa <__swsetup_r+0x7a>
 80009f2:	4621      	mov	r1, r4
 80009f4:	4628      	mov	r0, r5
 80009f6:	f000 fa5b 	bl	8000eb0 <__smakebuf_r>
 80009fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009fe:	f013 0201 	ands.w	r2, r3, #1
 8000a02:	d00a      	beq.n	8000a1a <__swsetup_r+0x9a>
 8000a04:	2200      	movs	r2, #0
 8000a06:	60a2      	str	r2, [r4, #8]
 8000a08:	6962      	ldr	r2, [r4, #20]
 8000a0a:	4252      	negs	r2, r2
 8000a0c:	61a2      	str	r2, [r4, #24]
 8000a0e:	6922      	ldr	r2, [r4, #16]
 8000a10:	b942      	cbnz	r2, 8000a24 <__swsetup_r+0xa4>
 8000a12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a16:	d1c5      	bne.n	80009a4 <__swsetup_r+0x24>
 8000a18:	bd38      	pop	{r3, r4, r5, pc}
 8000a1a:	0799      	lsls	r1, r3, #30
 8000a1c:	bf58      	it	pl
 8000a1e:	6962      	ldrpl	r2, [r4, #20]
 8000a20:	60a2      	str	r2, [r4, #8]
 8000a22:	e7f4      	b.n	8000a0e <__swsetup_r+0x8e>
 8000a24:	2000      	movs	r0, #0
 8000a26:	e7f7      	b.n	8000a18 <__swsetup_r+0x98>
 8000a28:	2000001c 	.word	0x2000001c

08000a2c <memset>:
 8000a2c:	4402      	add	r2, r0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d100      	bne.n	8000a36 <memset+0xa>
 8000a34:	4770      	bx	lr
 8000a36:	f803 1b01 	strb.w	r1, [r3], #1
 8000a3a:	e7f9      	b.n	8000a30 <memset+0x4>

08000a3c <_close_r>:
 8000a3c:	b538      	push	{r3, r4, r5, lr}
 8000a3e:	4d06      	ldr	r5, [pc, #24]	@ (8000a58 <_close_r+0x1c>)
 8000a40:	2300      	movs	r3, #0
 8000a42:	4604      	mov	r4, r0
 8000a44:	4608      	mov	r0, r1
 8000a46:	602b      	str	r3, [r5, #0]
 8000a48:	f7ff fd67 	bl	800051a <_close>
 8000a4c:	1c43      	adds	r3, r0, #1
 8000a4e:	d102      	bne.n	8000a56 <_close_r+0x1a>
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	b103      	cbz	r3, 8000a56 <_close_r+0x1a>
 8000a54:	6023      	str	r3, [r4, #0]
 8000a56:	bd38      	pop	{r3, r4, r5, pc}
 8000a58:	200001dc 	.word	0x200001dc

08000a5c <_lseek_r>:
 8000a5c:	b538      	push	{r3, r4, r5, lr}
 8000a5e:	4d07      	ldr	r5, [pc, #28]	@ (8000a7c <_lseek_r+0x20>)
 8000a60:	4604      	mov	r4, r0
 8000a62:	4608      	mov	r0, r1
 8000a64:	4611      	mov	r1, r2
 8000a66:	2200      	movs	r2, #0
 8000a68:	602a      	str	r2, [r5, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	f7ff fd79 	bl	8000562 <_lseek>
 8000a70:	1c43      	adds	r3, r0, #1
 8000a72:	d102      	bne.n	8000a7a <_lseek_r+0x1e>
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	b103      	cbz	r3, 8000a7a <_lseek_r+0x1e>
 8000a78:	6023      	str	r3, [r4, #0]
 8000a7a:	bd38      	pop	{r3, r4, r5, pc}
 8000a7c:	200001dc 	.word	0x200001dc

08000a80 <_read_r>:
 8000a80:	b538      	push	{r3, r4, r5, lr}
 8000a82:	4d07      	ldr	r5, [pc, #28]	@ (8000aa0 <_read_r+0x20>)
 8000a84:	4604      	mov	r4, r0
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	602a      	str	r2, [r5, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f7ff fd0a 	bl	80004a8 <_read>
 8000a94:	1c43      	adds	r3, r0, #1
 8000a96:	d102      	bne.n	8000a9e <_read_r+0x1e>
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	b103      	cbz	r3, 8000a9e <_read_r+0x1e>
 8000a9c:	6023      	str	r3, [r4, #0]
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
 8000aa0:	200001dc 	.word	0x200001dc

08000aa4 <_write_r>:
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4d07      	ldr	r5, [pc, #28]	@ (8000ac4 <_write_r+0x20>)
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	2200      	movs	r2, #0
 8000ab0:	602a      	str	r2, [r5, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f7ff fd15 	bl	80004e2 <_write>
 8000ab8:	1c43      	adds	r3, r0, #1
 8000aba:	d102      	bne.n	8000ac2 <_write_r+0x1e>
 8000abc:	682b      	ldr	r3, [r5, #0]
 8000abe:	b103      	cbz	r3, 8000ac2 <_write_r+0x1e>
 8000ac0:	6023      	str	r3, [r4, #0]
 8000ac2:	bd38      	pop	{r3, r4, r5, pc}
 8000ac4:	200001dc 	.word	0x200001dc

08000ac8 <__errno>:
 8000ac8:	4b01      	ldr	r3, [pc, #4]	@ (8000ad0 <__errno+0x8>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	2000001c 	.word	0x2000001c

08000ad4 <__libc_init_array>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8000b0c <__libc_init_array+0x38>)
 8000ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8000b10 <__libc_init_array+0x3c>)
 8000ada:	1b64      	subs	r4, r4, r5
 8000adc:	10a4      	asrs	r4, r4, #2
 8000ade:	2600      	movs	r6, #0
 8000ae0:	42a6      	cmp	r6, r4
 8000ae2:	d109      	bne.n	8000af8 <__libc_init_array+0x24>
 8000ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8000b14 <__libc_init_array+0x40>)
 8000ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8000b18 <__libc_init_array+0x44>)
 8000ae8:	f000 fa50 	bl	8000f8c <_init>
 8000aec:	1b64      	subs	r4, r4, r5
 8000aee:	10a4      	asrs	r4, r4, #2
 8000af0:	2600      	movs	r6, #0
 8000af2:	42a6      	cmp	r6, r4
 8000af4:	d105      	bne.n	8000b02 <__libc_init_array+0x2e>
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
 8000af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afc:	4798      	blx	r3
 8000afe:	3601      	adds	r6, #1
 8000b00:	e7ee      	b.n	8000ae0 <__libc_init_array+0xc>
 8000b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b06:	4798      	blx	r3
 8000b08:	3601      	adds	r6, #1
 8000b0a:	e7f2      	b.n	8000af2 <__libc_init_array+0x1e>
 8000b0c:	08001034 	.word	0x08001034
 8000b10:	08001034 	.word	0x08001034
 8000b14:	08001034 	.word	0x08001034
 8000b18:	08001038 	.word	0x08001038

08000b1c <__retarget_lock_init_recursive>:
 8000b1c:	4770      	bx	lr

08000b1e <__retarget_lock_acquire_recursive>:
 8000b1e:	4770      	bx	lr

08000b20 <__retarget_lock_release_recursive>:
 8000b20:	4770      	bx	lr
	...

08000b24 <_free_r>:
 8000b24:	b538      	push	{r3, r4, r5, lr}
 8000b26:	4605      	mov	r5, r0
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	d041      	beq.n	8000bb0 <_free_r+0x8c>
 8000b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b30:	1f0c      	subs	r4, r1, #4
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bfb8      	it	lt
 8000b36:	18e4      	addlt	r4, r4, r3
 8000b38:	f000 f8e0 	bl	8000cfc <__malloc_lock>
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb4 <_free_r+0x90>)
 8000b3e:	6813      	ldr	r3, [r2, #0]
 8000b40:	b933      	cbnz	r3, 8000b50 <_free_r+0x2c>
 8000b42:	6063      	str	r3, [r4, #4]
 8000b44:	6014      	str	r4, [r2, #0]
 8000b46:	4628      	mov	r0, r5
 8000b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b4c:	f000 b8dc 	b.w	8000d08 <__malloc_unlock>
 8000b50:	42a3      	cmp	r3, r4
 8000b52:	d908      	bls.n	8000b66 <_free_r+0x42>
 8000b54:	6820      	ldr	r0, [r4, #0]
 8000b56:	1821      	adds	r1, r4, r0
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	bf01      	itttt	eq
 8000b5c:	6819      	ldreq	r1, [r3, #0]
 8000b5e:	685b      	ldreq	r3, [r3, #4]
 8000b60:	1809      	addeq	r1, r1, r0
 8000b62:	6021      	streq	r1, [r4, #0]
 8000b64:	e7ed      	b.n	8000b42 <_free_r+0x1e>
 8000b66:	461a      	mov	r2, r3
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	b10b      	cbz	r3, 8000b70 <_free_r+0x4c>
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d9fa      	bls.n	8000b66 <_free_r+0x42>
 8000b70:	6811      	ldr	r1, [r2, #0]
 8000b72:	1850      	adds	r0, r2, r1
 8000b74:	42a0      	cmp	r0, r4
 8000b76:	d10b      	bne.n	8000b90 <_free_r+0x6c>
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	4401      	add	r1, r0
 8000b7c:	1850      	adds	r0, r2, r1
 8000b7e:	4283      	cmp	r3, r0
 8000b80:	6011      	str	r1, [r2, #0]
 8000b82:	d1e0      	bne.n	8000b46 <_free_r+0x22>
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	6053      	str	r3, [r2, #4]
 8000b8a:	4408      	add	r0, r1
 8000b8c:	6010      	str	r0, [r2, #0]
 8000b8e:	e7da      	b.n	8000b46 <_free_r+0x22>
 8000b90:	d902      	bls.n	8000b98 <_free_r+0x74>
 8000b92:	230c      	movs	r3, #12
 8000b94:	602b      	str	r3, [r5, #0]
 8000b96:	e7d6      	b.n	8000b46 <_free_r+0x22>
 8000b98:	6820      	ldr	r0, [r4, #0]
 8000b9a:	1821      	adds	r1, r4, r0
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	bf04      	itt	eq
 8000ba0:	6819      	ldreq	r1, [r3, #0]
 8000ba2:	685b      	ldreq	r3, [r3, #4]
 8000ba4:	6063      	str	r3, [r4, #4]
 8000ba6:	bf04      	itt	eq
 8000ba8:	1809      	addeq	r1, r1, r0
 8000baa:	6021      	streq	r1, [r4, #0]
 8000bac:	6054      	str	r4, [r2, #4]
 8000bae:	e7ca      	b.n	8000b46 <_free_r+0x22>
 8000bb0:	bd38      	pop	{r3, r4, r5, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001e8 	.word	0x200001e8

08000bb8 <sbrk_aligned>:
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	4e0f      	ldr	r6, [pc, #60]	@ (8000bf8 <sbrk_aligned+0x40>)
 8000bbc:	460c      	mov	r4, r1
 8000bbe:	6831      	ldr	r1, [r6, #0]
 8000bc0:	4605      	mov	r5, r0
 8000bc2:	b911      	cbnz	r1, 8000bca <sbrk_aligned+0x12>
 8000bc4:	f000 f9d2 	bl	8000f6c <_sbrk_r>
 8000bc8:	6030      	str	r0, [r6, #0]
 8000bca:	4621      	mov	r1, r4
 8000bcc:	4628      	mov	r0, r5
 8000bce:	f000 f9cd 	bl	8000f6c <_sbrk_r>
 8000bd2:	1c43      	adds	r3, r0, #1
 8000bd4:	d103      	bne.n	8000bde <sbrk_aligned+0x26>
 8000bd6:	f04f 34ff 	mov.w	r4, #4294967295
 8000bda:	4620      	mov	r0, r4
 8000bdc:	bd70      	pop	{r4, r5, r6, pc}
 8000bde:	1cc4      	adds	r4, r0, #3
 8000be0:	f024 0403 	bic.w	r4, r4, #3
 8000be4:	42a0      	cmp	r0, r4
 8000be6:	d0f8      	beq.n	8000bda <sbrk_aligned+0x22>
 8000be8:	1a21      	subs	r1, r4, r0
 8000bea:	4628      	mov	r0, r5
 8000bec:	f000 f9be 	bl	8000f6c <_sbrk_r>
 8000bf0:	3001      	adds	r0, #1
 8000bf2:	d1f2      	bne.n	8000bda <sbrk_aligned+0x22>
 8000bf4:	e7ef      	b.n	8000bd6 <sbrk_aligned+0x1e>
 8000bf6:	bf00      	nop
 8000bf8:	200001e4 	.word	0x200001e4

08000bfc <_malloc_r>:
 8000bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c00:	1ccd      	adds	r5, r1, #3
 8000c02:	f025 0503 	bic.w	r5, r5, #3
 8000c06:	3508      	adds	r5, #8
 8000c08:	2d0c      	cmp	r5, #12
 8000c0a:	bf38      	it	cc
 8000c0c:	250c      	movcc	r5, #12
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	4606      	mov	r6, r0
 8000c12:	db01      	blt.n	8000c18 <_malloc_r+0x1c>
 8000c14:	42a9      	cmp	r1, r5
 8000c16:	d904      	bls.n	8000c22 <_malloc_r+0x26>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	6033      	str	r3, [r6, #0]
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cf8 <_malloc_r+0xfc>
 8000c26:	f000 f869 	bl	8000cfc <__malloc_lock>
 8000c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c2e:	461c      	mov	r4, r3
 8000c30:	bb44      	cbnz	r4, 8000c84 <_malloc_r+0x88>
 8000c32:	4629      	mov	r1, r5
 8000c34:	4630      	mov	r0, r6
 8000c36:	f7ff ffbf 	bl	8000bb8 <sbrk_aligned>
 8000c3a:	1c43      	adds	r3, r0, #1
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	d158      	bne.n	8000cf2 <_malloc_r+0xf6>
 8000c40:	f8d8 4000 	ldr.w	r4, [r8]
 8000c44:	4627      	mov	r7, r4
 8000c46:	2f00      	cmp	r7, #0
 8000c48:	d143      	bne.n	8000cd2 <_malloc_r+0xd6>
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	d04b      	beq.n	8000ce6 <_malloc_r+0xea>
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	4639      	mov	r1, r7
 8000c52:	4630      	mov	r0, r6
 8000c54:	eb04 0903 	add.w	r9, r4, r3
 8000c58:	f000 f988 	bl	8000f6c <_sbrk_r>
 8000c5c:	4581      	cmp	r9, r0
 8000c5e:	d142      	bne.n	8000ce6 <_malloc_r+0xea>
 8000c60:	6821      	ldr	r1, [r4, #0]
 8000c62:	1a6d      	subs	r5, r5, r1
 8000c64:	4629      	mov	r1, r5
 8000c66:	4630      	mov	r0, r6
 8000c68:	f7ff ffa6 	bl	8000bb8 <sbrk_aligned>
 8000c6c:	3001      	adds	r0, #1
 8000c6e:	d03a      	beq.n	8000ce6 <_malloc_r+0xea>
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	442b      	add	r3, r5
 8000c74:	6023      	str	r3, [r4, #0]
 8000c76:	f8d8 3000 	ldr.w	r3, [r8]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	bb62      	cbnz	r2, 8000cd8 <_malloc_r+0xdc>
 8000c7e:	f8c8 7000 	str.w	r7, [r8]
 8000c82:	e00f      	b.n	8000ca4 <_malloc_r+0xa8>
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	1b52      	subs	r2, r2, r5
 8000c88:	d420      	bmi.n	8000ccc <_malloc_r+0xd0>
 8000c8a:	2a0b      	cmp	r2, #11
 8000c8c:	d917      	bls.n	8000cbe <_malloc_r+0xc2>
 8000c8e:	1961      	adds	r1, r4, r5
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	6025      	str	r5, [r4, #0]
 8000c94:	bf18      	it	ne
 8000c96:	6059      	strne	r1, [r3, #4]
 8000c98:	6863      	ldr	r3, [r4, #4]
 8000c9a:	bf08      	it	eq
 8000c9c:	f8c8 1000 	streq.w	r1, [r8]
 8000ca0:	5162      	str	r2, [r4, r5]
 8000ca2:	604b      	str	r3, [r1, #4]
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f000 f82f 	bl	8000d08 <__malloc_unlock>
 8000caa:	f104 000b 	add.w	r0, r4, #11
 8000cae:	1d23      	adds	r3, r4, #4
 8000cb0:	f020 0007 	bic.w	r0, r0, #7
 8000cb4:	1ac2      	subs	r2, r0, r3
 8000cb6:	bf1c      	itt	ne
 8000cb8:	1a1b      	subne	r3, r3, r0
 8000cba:	50a3      	strne	r3, [r4, r2]
 8000cbc:	e7af      	b.n	8000c1e <_malloc_r+0x22>
 8000cbe:	6862      	ldr	r2, [r4, #4]
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	bf0c      	ite	eq
 8000cc4:	f8c8 2000 	streq.w	r2, [r8]
 8000cc8:	605a      	strne	r2, [r3, #4]
 8000cca:	e7eb      	b.n	8000ca4 <_malloc_r+0xa8>
 8000ccc:	4623      	mov	r3, r4
 8000cce:	6864      	ldr	r4, [r4, #4]
 8000cd0:	e7ae      	b.n	8000c30 <_malloc_r+0x34>
 8000cd2:	463c      	mov	r4, r7
 8000cd4:	687f      	ldr	r7, [r7, #4]
 8000cd6:	e7b6      	b.n	8000c46 <_malloc_r+0x4a>
 8000cd8:	461a      	mov	r2, r3
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	d1fb      	bne.n	8000cd8 <_malloc_r+0xdc>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	6053      	str	r3, [r2, #4]
 8000ce4:	e7de      	b.n	8000ca4 <_malloc_r+0xa8>
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	6033      	str	r3, [r6, #0]
 8000cea:	4630      	mov	r0, r6
 8000cec:	f000 f80c 	bl	8000d08 <__malloc_unlock>
 8000cf0:	e794      	b.n	8000c1c <_malloc_r+0x20>
 8000cf2:	6005      	str	r5, [r0, #0]
 8000cf4:	e7d6      	b.n	8000ca4 <_malloc_r+0xa8>
 8000cf6:	bf00      	nop
 8000cf8:	200001e8 	.word	0x200001e8

08000cfc <__malloc_lock>:
 8000cfc:	4801      	ldr	r0, [pc, #4]	@ (8000d04 <__malloc_lock+0x8>)
 8000cfe:	f7ff bf0e 	b.w	8000b1e <__retarget_lock_acquire_recursive>
 8000d02:	bf00      	nop
 8000d04:	200001e0 	.word	0x200001e0

08000d08 <__malloc_unlock>:
 8000d08:	4801      	ldr	r0, [pc, #4]	@ (8000d10 <__malloc_unlock+0x8>)
 8000d0a:	f7ff bf09 	b.w	8000b20 <__retarget_lock_release_recursive>
 8000d0e:	bf00      	nop
 8000d10:	200001e0 	.word	0x200001e0

08000d14 <__sflush_r>:
 8000d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1a:	0716      	lsls	r6, r2, #28
 8000d1c:	4605      	mov	r5, r0
 8000d1e:	460c      	mov	r4, r1
 8000d20:	d454      	bmi.n	8000dcc <__sflush_r+0xb8>
 8000d22:	684b      	ldr	r3, [r1, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dc02      	bgt.n	8000d2e <__sflush_r+0x1a>
 8000d28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dd48      	ble.n	8000dc0 <__sflush_r+0xac>
 8000d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d045      	beq.n	8000dc0 <__sflush_r+0xac>
 8000d34:	2300      	movs	r3, #0
 8000d36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d3a:	682f      	ldr	r7, [r5, #0]
 8000d3c:	6a21      	ldr	r1, [r4, #32]
 8000d3e:	602b      	str	r3, [r5, #0]
 8000d40:	d030      	beq.n	8000da4 <__sflush_r+0x90>
 8000d42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d44:	89a3      	ldrh	r3, [r4, #12]
 8000d46:	0759      	lsls	r1, r3, #29
 8000d48:	d505      	bpl.n	8000d56 <__sflush_r+0x42>
 8000d4a:	6863      	ldr	r3, [r4, #4]
 8000d4c:	1ad2      	subs	r2, r2, r3
 8000d4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d50:	b10b      	cbz	r3, 8000d56 <__sflush_r+0x42>
 8000d52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d54:	1ad2      	subs	r2, r2, r3
 8000d56:	2300      	movs	r3, #0
 8000d58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d5a:	6a21      	ldr	r1, [r4, #32]
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	47b0      	blx	r6
 8000d60:	1c43      	adds	r3, r0, #1
 8000d62:	89a3      	ldrh	r3, [r4, #12]
 8000d64:	d106      	bne.n	8000d74 <__sflush_r+0x60>
 8000d66:	6829      	ldr	r1, [r5, #0]
 8000d68:	291d      	cmp	r1, #29
 8000d6a:	d82b      	bhi.n	8000dc4 <__sflush_r+0xb0>
 8000d6c:	4a28      	ldr	r2, [pc, #160]	@ (8000e10 <__sflush_r+0xfc>)
 8000d6e:	410a      	asrs	r2, r1
 8000d70:	07d6      	lsls	r6, r2, #31
 8000d72:	d427      	bmi.n	8000dc4 <__sflush_r+0xb0>
 8000d74:	2200      	movs	r2, #0
 8000d76:	6062      	str	r2, [r4, #4]
 8000d78:	04d9      	lsls	r1, r3, #19
 8000d7a:	6922      	ldr	r2, [r4, #16]
 8000d7c:	6022      	str	r2, [r4, #0]
 8000d7e:	d504      	bpl.n	8000d8a <__sflush_r+0x76>
 8000d80:	1c42      	adds	r2, r0, #1
 8000d82:	d101      	bne.n	8000d88 <__sflush_r+0x74>
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	b903      	cbnz	r3, 8000d8a <__sflush_r+0x76>
 8000d88:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d8c:	602f      	str	r7, [r5, #0]
 8000d8e:	b1b9      	cbz	r1, 8000dc0 <__sflush_r+0xac>
 8000d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d94:	4299      	cmp	r1, r3
 8000d96:	d002      	beq.n	8000d9e <__sflush_r+0x8a>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f7ff fec3 	bl	8000b24 <_free_r>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000da2:	e00d      	b.n	8000dc0 <__sflush_r+0xac>
 8000da4:	2301      	movs	r3, #1
 8000da6:	4628      	mov	r0, r5
 8000da8:	47b0      	blx	r6
 8000daa:	4602      	mov	r2, r0
 8000dac:	1c50      	adds	r0, r2, #1
 8000dae:	d1c9      	bne.n	8000d44 <__sflush_r+0x30>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0c6      	beq.n	8000d44 <__sflush_r+0x30>
 8000db6:	2b1d      	cmp	r3, #29
 8000db8:	d001      	beq.n	8000dbe <__sflush_r+0xaa>
 8000dba:	2b16      	cmp	r3, #22
 8000dbc:	d11d      	bne.n	8000dfa <__sflush_r+0xe6>
 8000dbe:	602f      	str	r7, [r5, #0]
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e021      	b.n	8000e08 <__sflush_r+0xf4>
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	e01a      	b.n	8000e02 <__sflush_r+0xee>
 8000dcc:	690f      	ldr	r7, [r1, #16]
 8000dce:	2f00      	cmp	r7, #0
 8000dd0:	d0f6      	beq.n	8000dc0 <__sflush_r+0xac>
 8000dd2:	0793      	lsls	r3, r2, #30
 8000dd4:	680e      	ldr	r6, [r1, #0]
 8000dd6:	bf08      	it	eq
 8000dd8:	694b      	ldreq	r3, [r1, #20]
 8000dda:	600f      	str	r7, [r1, #0]
 8000ddc:	bf18      	it	ne
 8000dde:	2300      	movne	r3, #0
 8000de0:	1bf6      	subs	r6, r6, r7
 8000de2:	608b      	str	r3, [r1, #8]
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	ddeb      	ble.n	8000dc0 <__sflush_r+0xac>
 8000de8:	6a21      	ldr	r1, [r4, #32]
 8000dea:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000dee:	4633      	mov	r3, r6
 8000df0:	463a      	mov	r2, r7
 8000df2:	4628      	mov	r0, r5
 8000df4:	47e0      	blx	ip
 8000df6:	2800      	cmp	r0, #0
 8000df8:	dc07      	bgt.n	8000e0a <__sflush_r+0xf6>
 8000dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e02:	81a3      	strh	r3, [r4, #12]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e0a:	4407      	add	r7, r0
 8000e0c:	1a36      	subs	r6, r6, r0
 8000e0e:	e7e9      	b.n	8000de4 <__sflush_r+0xd0>
 8000e10:	dfbffffe 	.word	0xdfbffffe

08000e14 <_fflush_r>:
 8000e14:	b538      	push	{r3, r4, r5, lr}
 8000e16:	690b      	ldr	r3, [r1, #16]
 8000e18:	4605      	mov	r5, r0
 8000e1a:	460c      	mov	r4, r1
 8000e1c:	b913      	cbnz	r3, 8000e24 <_fflush_r+0x10>
 8000e1e:	2500      	movs	r5, #0
 8000e20:	4628      	mov	r0, r5
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
 8000e24:	b118      	cbz	r0, 8000e2e <_fflush_r+0x1a>
 8000e26:	6a03      	ldr	r3, [r0, #32]
 8000e28:	b90b      	cbnz	r3, 8000e2e <_fflush_r+0x1a>
 8000e2a:	f7ff fc93 	bl	8000754 <__sinit>
 8000e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f3      	beq.n	8000e1e <_fflush_r+0xa>
 8000e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e38:	07d0      	lsls	r0, r2, #31
 8000e3a:	d404      	bmi.n	8000e46 <_fflush_r+0x32>
 8000e3c:	0599      	lsls	r1, r3, #22
 8000e3e:	d402      	bmi.n	8000e46 <_fflush_r+0x32>
 8000e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e42:	f7ff fe6c 	bl	8000b1e <__retarget_lock_acquire_recursive>
 8000e46:	4628      	mov	r0, r5
 8000e48:	4621      	mov	r1, r4
 8000e4a:	f7ff ff63 	bl	8000d14 <__sflush_r>
 8000e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e50:	07da      	lsls	r2, r3, #31
 8000e52:	4605      	mov	r5, r0
 8000e54:	d4e4      	bmi.n	8000e20 <_fflush_r+0xc>
 8000e56:	89a3      	ldrh	r3, [r4, #12]
 8000e58:	059b      	lsls	r3, r3, #22
 8000e5a:	d4e1      	bmi.n	8000e20 <_fflush_r+0xc>
 8000e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e5e:	f7ff fe5f 	bl	8000b20 <__retarget_lock_release_recursive>
 8000e62:	e7dd      	b.n	8000e20 <_fflush_r+0xc>

08000e64 <__swhatbuf_r>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	460c      	mov	r4, r1
 8000e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e6c:	2900      	cmp	r1, #0
 8000e6e:	b096      	sub	sp, #88	@ 0x58
 8000e70:	4615      	mov	r5, r2
 8000e72:	461e      	mov	r6, r3
 8000e74:	da0d      	bge.n	8000e92 <__swhatbuf_r+0x2e>
 8000e76:	89a3      	ldrh	r3, [r4, #12]
 8000e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e7c:	f04f 0100 	mov.w	r1, #0
 8000e80:	bf14      	ite	ne
 8000e82:	2340      	movne	r3, #64	@ 0x40
 8000e84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e88:	2000      	movs	r0, #0
 8000e8a:	6031      	str	r1, [r6, #0]
 8000e8c:	602b      	str	r3, [r5, #0]
 8000e8e:	b016      	add	sp, #88	@ 0x58
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
 8000e92:	466a      	mov	r2, sp
 8000e94:	f000 f848 	bl	8000f28 <_fstat_r>
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	dbec      	blt.n	8000e76 <__swhatbuf_r+0x12>
 8000e9c:	9901      	ldr	r1, [sp, #4]
 8000e9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000ea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000ea6:	4259      	negs	r1, r3
 8000ea8:	4159      	adcs	r1, r3
 8000eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eae:	e7eb      	b.n	8000e88 <__swhatbuf_r+0x24>

08000eb0 <__smakebuf_r>:
 8000eb0:	898b      	ldrh	r3, [r1, #12]
 8000eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000eb4:	079d      	lsls	r5, r3, #30
 8000eb6:	4606      	mov	r6, r0
 8000eb8:	460c      	mov	r4, r1
 8000eba:	d507      	bpl.n	8000ecc <__smakebuf_r+0x1c>
 8000ebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000ec0:	6023      	str	r3, [r4, #0]
 8000ec2:	6123      	str	r3, [r4, #16]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	6163      	str	r3, [r4, #20]
 8000ec8:	b003      	add	sp, #12
 8000eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ecc:	ab01      	add	r3, sp, #4
 8000ece:	466a      	mov	r2, sp
 8000ed0:	f7ff ffc8 	bl	8000e64 <__swhatbuf_r>
 8000ed4:	9f00      	ldr	r7, [sp, #0]
 8000ed6:	4605      	mov	r5, r0
 8000ed8:	4639      	mov	r1, r7
 8000eda:	4630      	mov	r0, r6
 8000edc:	f7ff fe8e 	bl	8000bfc <_malloc_r>
 8000ee0:	b948      	cbnz	r0, 8000ef6 <__smakebuf_r+0x46>
 8000ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ee6:	059a      	lsls	r2, r3, #22
 8000ee8:	d4ee      	bmi.n	8000ec8 <__smakebuf_r+0x18>
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	81a3      	strh	r3, [r4, #12]
 8000ef4:	e7e2      	b.n	8000ebc <__smakebuf_r+0xc>
 8000ef6:	89a3      	ldrh	r3, [r4, #12]
 8000ef8:	6020      	str	r0, [r4, #0]
 8000efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000efe:	81a3      	strh	r3, [r4, #12]
 8000f00:	9b01      	ldr	r3, [sp, #4]
 8000f02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000f06:	b15b      	cbz	r3, 8000f20 <__smakebuf_r+0x70>
 8000f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f000 f81d 	bl	8000f4c <_isatty_r>
 8000f12:	b128      	cbz	r0, 8000f20 <__smakebuf_r+0x70>
 8000f14:	89a3      	ldrh	r3, [r4, #12]
 8000f16:	f023 0303 	bic.w	r3, r3, #3
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	81a3      	strh	r3, [r4, #12]
 8000f20:	89a3      	ldrh	r3, [r4, #12]
 8000f22:	431d      	orrs	r5, r3
 8000f24:	81a5      	strh	r5, [r4, #12]
 8000f26:	e7cf      	b.n	8000ec8 <__smakebuf_r+0x18>

08000f28 <_fstat_r>:
 8000f28:	b538      	push	{r3, r4, r5, lr}
 8000f2a:	4d07      	ldr	r5, [pc, #28]	@ (8000f48 <_fstat_r+0x20>)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	602b      	str	r3, [r5, #0]
 8000f36:	f7ff fafb 	bl	8000530 <_fstat>
 8000f3a:	1c43      	adds	r3, r0, #1
 8000f3c:	d102      	bne.n	8000f44 <_fstat_r+0x1c>
 8000f3e:	682b      	ldr	r3, [r5, #0]
 8000f40:	b103      	cbz	r3, 8000f44 <_fstat_r+0x1c>
 8000f42:	6023      	str	r3, [r4, #0]
 8000f44:	bd38      	pop	{r3, r4, r5, pc}
 8000f46:	bf00      	nop
 8000f48:	200001dc 	.word	0x200001dc

08000f4c <_isatty_r>:
 8000f4c:	b538      	push	{r3, r4, r5, lr}
 8000f4e:	4d06      	ldr	r5, [pc, #24]	@ (8000f68 <_isatty_r+0x1c>)
 8000f50:	2300      	movs	r3, #0
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	602b      	str	r3, [r5, #0]
 8000f58:	f7ff faf9 	bl	800054e <_isatty>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d102      	bne.n	8000f66 <_isatty_r+0x1a>
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	b103      	cbz	r3, 8000f66 <_isatty_r+0x1a>
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	200001dc 	.word	0x200001dc

08000f6c <_sbrk_r>:
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4d06      	ldr	r5, [pc, #24]	@ (8000f88 <_sbrk_r+0x1c>)
 8000f70:	2300      	movs	r3, #0
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	602b      	str	r3, [r5, #0]
 8000f78:	f7ff fb00 	bl	800057c <_sbrk>
 8000f7c:	1c43      	adds	r3, r0, #1
 8000f7e:	d102      	bne.n	8000f86 <_sbrk_r+0x1a>
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	b103      	cbz	r3, 8000f86 <_sbrk_r+0x1a>
 8000f84:	6023      	str	r3, [r4, #0]
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
 8000f88:	200001dc 	.word	0x200001dc

08000f8c <_init>:
 8000f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8e:	bf00      	nop
 8000f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f92:	bc08      	pop	{r3}
 8000f94:	469e      	mov	lr, r3
 8000f96:	4770      	bx	lr

08000f98 <_fini>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr
